#!/usr/bin/env python3
"""
FUNGUJ√öCA PROFESION√ÅLNA ENERGETICK√ù AUDIT APLIK√ÅCIA
User-friendly s bezprobl√©mov√Ωm zberom d√°t a profesion√°lnymi v√Ωstupmi
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
from datetime import datetime
import json
import math

class WorkingEnergyAudit:
    def __init__(self, root):
        self.root = root
        self.root.title("üè¢ Profesion√°lny Energetick√Ω Audit System v2.0")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f5f5f5')
        
        # D√°ta
        self.audit_data = {}
        self.results = {}
        self.current_project_file = None
        
        self.create_gui()
        
    def create_gui(self):
        """Vytvorenie hlavn√©ho GUI"""
        
        # PROFESION√ÅLNA HLAVIƒåKA
        self.create_header()
        
        # HLAVN√ù OBSAH S TABMI
        self.create_main_tabs()
        
        # SPODN√ù PANEL S TLAƒåIDLAMI
        self.create_action_panel()
        
        # STATUS BAR
        self.create_status_bar()
        
    def create_header(self):
        """Profesion√°lna hlaviƒçka"""
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=70)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        # ƒΩav√° strana
        left_frame = tk.Frame(header_frame, bg='#2c3e50')
        left_frame.pack(side=tk.LEFT, padx=20, pady=15)
        
        title_label = tk.Label(left_frame, 
                              text="üè¢ PROFESION√ÅLNY ENERGETICK√ù AUDIT",
                              font=('Arial', 16, 'bold'), fg='white', bg='#2c3e50')
        title_label.pack(anchor=tk.W)
        
        subtitle_label = tk.Label(left_frame,
                                 text="Syst√©m pre energetick√© audity podƒæa STN EN 16247-1",
                                 font=('Arial', 9), fg='#bdc3c7', bg='#2c3e50')
        subtitle_label.pack(anchor=tk.W)
        
        # Prav√° strana - info o projekte
        right_frame = tk.Frame(header_frame, bg='#2c3e50')
        right_frame.pack(side=tk.RIGHT, padx=20, pady=15)
        
        self.project_label = tk.Label(right_frame, text="Nov√Ω projekt",
                                     font=('Arial', 12, 'bold'), fg='#ecf0f1', bg='#2c3e50')
        self.project_label.pack(anchor=tk.E)
        
        date_label = tk.Label(right_frame, 
                             text=f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                             font=('Arial', 9), fg='#bdc3c7', bg='#2c3e50')
        date_label.pack(anchor=tk.E)
        
    def create_main_tabs(self):
        """Hlavn√© taby s formul√°rmi"""
        tab_frame = tk.Frame(self.root, bg='#f5f5f5')
        tab_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Vytvorenie notebook widget
        self.notebook = ttk.Notebook(tab_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Vytvorenie jednotliv√Ωch tabov
        self.create_basic_info_tab()
        self.create_envelope_tab()  # Obsahuje aj tepelno-technick√© pos√∫denie
        self.create_heating_tab()
        self.create_dhw_tab()  # Nov√Ω samostatn√Ω tab pre TUV
        self.create_electrical_tab()
        self.create_usage_tab()
        self.create_results_tab()
        
    def create_basic_info_tab(self):
        """Tab 1: Z√°kladn√© inform√°cie podƒæa STN EN 16247-1"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üè¢ Z√°kladn√© √∫daje")
        
        # Scrollable frame
        canvas = tk.Canvas(tab)
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)
        
        # Leg√©nda farieb na vrchu
        legend_frame = tk.Frame(scrollable_frame, bg='#f8f9fa', relief=tk.RIDGE, bd=1)
        legend_frame.pack(fill=tk.X, padx=20, pady=5)
        
        tk.Label(legend_frame, text="‚ÑπÔ∏è LEGEND√Å POL√ç:", font=('Arial', 10, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10, pady=5)
        tk.Label(legend_frame, text="üî¥ POVINN√â", fg='red', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üü† D√îLE≈ΩIT√â", fg='orange', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üîµ VOLITELN√â", fg='blue', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        
        scrollable_frame.bind("<Configure>", 
                             lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # IDENTIFIKAƒåN√â √öDAJE PODƒΩA STN EN 16247-1
        id_frame = tk.LabelFrame(scrollable_frame, text="üè¢ Identifik√°cia objektu (STN EN 16247-1 bod 6.2.1)", 
                                font=('Arial', 11, 'bold'))
        id_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1
        tk.Label(id_frame, text="N√°zov budovy *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.building_name = tk.Entry(id_frame, width=30, font=('Arial', 9), bg='#ffe6e6')
        self.building_name.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(id_frame, text="√öƒçel budovy *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.building_purpose = ttk.Combobox(id_frame, width=25, values=[
            "Rodinn√Ω dom", "Bytov√Ω dom", "Administrat√≠vna budova", "≈†kola", "Nemocnica",
            "Hotel", "Obchodn√© centrum", "Re≈°taur√°cia", "Priemyseln√° budova", "Sklad", "Ostatn√©"
        ])
        self.building_purpose.configure(style='Required.TCombobox')
        self.building_purpose.grid(row=0, column=3, padx=5, pady=3)
        self.building_purpose.bind('<<ComboboxSelected>>', self.on_building_purpose_changed)
        
        # Riad 2  
        tk.Label(id_frame, text="Adresa *:", fg='red', font=('Arial', 9, 'bold')).grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.address = tk.Entry(id_frame, width=30, font=('Arial', 9), bg='#ffe6e6')
        self.address.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(id_frame, text="PSƒå a obec:", fg='blue').grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.postal_city = tk.Entry(id_frame, width=25, font=('Arial', 9), bg='#e6f2ff')
        self.postal_city.grid(row=1, column=3, padx=5, pady=3)
        
        # Riad 3
        tk.Label(id_frame, text="Katastr√°lne √∫zemie:", fg='blue').grid(row=2, column=0, sticky=tk.W, padx=5, pady=3)
        self.cadastral = tk.Entry(id_frame, width=30, font=('Arial', 9), bg='#e6f2ff')
        self.cadastral.grid(row=2, column=1, padx=5, pady=3)
        
        tk.Label(id_frame, text="S√∫pisn√©/orientaƒçn√© ƒç√≠slo:", fg='blue').grid(row=2, column=2, sticky=tk.W, padx=5, pady=3)
        self.house_number = tk.Entry(id_frame, width=25, font=('Arial', 9), bg='#e6f2ff')
        self.house_number.grid(row=2, column=3, padx=5, pady=3)
        
        # Riad 4
        tk.Label(id_frame, text="Vlastn√≠k budovy *:", fg='red', font=('Arial', 9, 'bold')).grid(row=3, column=0, sticky=tk.W, padx=5, pady=3)
        self.owner = tk.Entry(id_frame, width=30, font=('Arial', 9), bg='#ffe6e6')
        self.owner.grid(row=3, column=1, padx=5, pady=3)
        
        tk.Label(id_frame, text="IƒåO vlastn√≠ka:", fg='blue').grid(row=3, column=2, sticky=tk.W, padx=5, pady=3)
        self.owner_ico = tk.Entry(id_frame, width=25, font=('Arial', 9), bg='#e6f2ff')
        self.owner_ico.grid(row=3, column=3, padx=5, pady=3)
        
        # Riad 5
        tk.Label(id_frame, text="Kontaktn√° osoba *:", fg='red', font=('Arial', 9, 'bold')).grid(row=4, column=0, sticky=tk.W, padx=5, pady=3)
        self.contact_person = tk.Entry(id_frame, width=30, font=('Arial', 9), bg='#ffe6e6')
        self.contact_person.grid(row=4, column=1, padx=5, pady=3)
        
        tk.Label(id_frame, text="Telef√≥n/Email:", fg='orange').grid(row=4, column=2, sticky=tk.W, padx=5, pady=3)
        self.contact_details = tk.Entry(id_frame, width=25, font=('Arial', 9), bg='#fff2e6')
        self.contact_details.grid(row=4, column=3, padx=5, pady=3)
        
        # TECHNICK√â CHARAKTERISTIKY PODƒΩA NORMY
        tech_frame = tk.LabelFrame(scrollable_frame, text="üìê Technick√© charakteristiky (STN EN 16247-1 bod 6.2.2)", 
                                  font=('Arial', 11, 'bold'))
        tech_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1 - Z√°kladn√© rozmery
        tk.Label(tech_frame, text="Rok v√Ωstavby *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.construction_year = tk.Entry(tech_frame, width=15, bg='#ffe6e6')
        self.construction_year.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(tech_frame, text="Rok poslednej rekon≈°trukcie:", fg='orange').grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.renovation_year = tk.Entry(tech_frame, width=15, bg='#fff2e6')
        self.renovation_year.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(tech_frame, text="Energetick√° trieda (aktu√°lna):", fg='blue').grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.current_energy_class = ttk.Combobox(tech_frame, width=12, values=["A", "B", "C", "D", "E", "F", "G", "Nezn√°ma"])
        self.current_energy_class.grid(row=0, column=5, padx=5, pady=3)
        
        # Riad 2 - Plochy a objemy
        tk.Label(tech_frame, text="Podlahov√° plocha (vykurovan√°) [m¬≤] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.floor_area = tk.Entry(tech_frame, width=15, bg='#ffe6e6')
        self.floor_area.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(tech_frame, text="Podlahov√° plocha (celkov√°) [m¬≤]:", fg='blue').grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.total_floor_area = tk.Entry(tech_frame, width=15, bg='#e6f2ff')
        self.total_floor_area.grid(row=1, column=3, padx=5, pady=3)
        
        tk.Label(tech_frame, text="Obostavan√Ω priestor [m¬≥] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=1, column=4, sticky=tk.W, padx=5, pady=3)
        self.volume = tk.Entry(tech_frame, width=12, bg='#ffe6e6')
        self.volume.grid(row=1, column=5, padx=5, pady=3)
        
        # Riad 3 - Geometria
        tk.Label(tech_frame, text="Poƒçet nadzemn√Ωch podla≈æ√≠ *:", fg='red', font=('Arial', 9, 'bold')).grid(row=2, column=0, sticky=tk.W, padx=5, pady=3)
        self.floors_above = tk.Entry(tech_frame, width=15, bg='#ffe6e6')
        self.floors_above.grid(row=2, column=1, padx=5, pady=3)
        
        tk.Label(tech_frame, text="Poƒçet podzemn√Ωch podla≈æ√≠:", fg='blue').grid(row=2, column=2, sticky=tk.W, padx=5, pady=3)
        self.floors_below = tk.Entry(tech_frame, width=15, bg='#e6f2ff')
        self.floors_below.grid(row=2, column=3, padx=5, pady=3)
        
        tk.Label(tech_frame, text="Svetl√° v√Ω≈°ka [m]:", fg='blue').grid(row=2, column=4, sticky=tk.W, padx=5, pady=3)
        self.ceiling_height = tk.Entry(tech_frame, width=12, bg='#e6f2ff')
        self.ceiling_height.grid(row=2, column=5, padx=5, pady=3)
        
        # Riad 4 - Kon≈°trukƒçn√Ω syst√©m a typol√≥gia
        tk.Label(tech_frame, text="Kon≈°trukƒçn√Ω syst√©m:", fg='orange').grid(row=3, column=0, sticky=tk.W, padx=5, pady=3)
        self.construction_system = ttk.Combobox(tech_frame, width=13, values=[
            "Murovan√Ω", "Montovan√Ω bet√≥n", "Skelet ≈ΩB", "Oceƒæov√Ω skelet", "Drevostavba", "Zmie≈°an√Ω", "Ostatn√©"
        ])
        self.construction_system.grid(row=3, column=1, padx=5, pady=3)
        
        tk.Label(tech_frame, text="Typ zalo≈æenia:", fg='blue').grid(row=3, column=2, sticky=tk.W, padx=5, pady=3)
        self.foundation_type = ttk.Combobox(tech_frame, width=13, values=[
            "Z√°kladov√© p√°sy", "Z√°kladov√° doska", "Pil√≥ty", "Suter√©n", "Ostatn√©"
        ])
        self.foundation_type.grid(row=3, column=3, padx=5, pady=3)
        
        tk.Label(tech_frame, text="Orient√°cia hlavnej fas√°dy:", fg='blue').grid(row=3, column=4, sticky=tk.W, padx=5, pady=3)
        self.orientation = ttk.Combobox(tech_frame, width=10, values=["S", "SV", "V", "JV", "J", "JZ", "Z", "SZ"])
        self.orientation.grid(row=3, column=5, padx=5, pady=3)
        
        # DETAILN√â INFORM√ÅCIE PODƒΩA ZADANIA EACB
        detailed_frame = tk.LabelFrame(scrollable_frame, text="üìÑ Detailn√© inform√°cie podƒæa zadania EACB", 
                                      font=('Arial', 11, 'bold'))
        detailed_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1 - Funkcie a popis
        tk.Label(detailed_frame, text="Kon≈°trukƒçn√° v√Ω≈°ka [m]:", fg='orange').grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.structural_height = tk.Entry(detailed_frame, width=12, bg='#fff2e6')
        self.structural_height.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(detailed_frame, text="Funkcia podla≈æ√≠:", fg='blue').grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.floor_functions = tk.Entry(detailed_frame, width=25, bg='#e6f2ff')
        self.floor_functions.grid(row=0, column=3, columnspan=2, padx=5, pady=3)
        
        # Riad 2 - Byty a kolaud√°cia
        tk.Label(detailed_frame, text="Poƒçet bytov v objekte:", fg='blue').grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.apartments_count = tk.Entry(detailed_frame, width=12, bg='#e6f2ff')
        self.apartments_count.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(detailed_frame, text="Veƒækosti bytov:", fg='blue').grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.apartment_sizes = tk.Entry(detailed_frame, width=25, bg='#e6f2ff')
        self.apartment_sizes.grid(row=1, column=3, columnspan=2, padx=5, pady=3)
        
        # Riad 3 - Kolaud√°cia a stav
        tk.Label(detailed_frame, text="D√°tum kolaud√°cie:", fg='orange').grid(row=2, column=0, sticky=tk.W, padx=5, pady=3)
        self.building_permit_date = tk.Entry(detailed_frame, width=12, bg='#fff2e6')
        self.building_permit_date.grid(row=2, column=1, padx=5, pady=3)
        
        tk.Label(detailed_frame, text="Stav kon≈°trukcii:", fg='orange').grid(row=2, column=2, sticky=tk.W, padx=5, pady=3)
        self.construction_condition = ttk.Combobox(detailed_frame, width=22, values=[
            "P√¥vodn√Ω stav", "Moderne rekongen≈°trukcia", "ƒåiastoƒçn√° rekongen≈°trukcia", "Zlep≈°en√Ω stav"
        ])
        self.construction_condition.grid(row=2, column=3, columnspan=2, padx=5, pady=3)
        
        # KLIMATICK√â √öDAJE
        climate_frame = tk.LabelFrame(scrollable_frame, text="üå§Ô∏è Klimatick√© √∫daje a lokalita", 
                                     font=('Arial', 11, 'bold'))
        climate_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1
        tk.Label(climate_frame, text="Klimatick√° oblas≈•:", fg='blue').grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.climate_zone = ttk.Combobox(climate_frame, width=20, values=[
            "Tepl√° (do 500 m n.m.)", "Mierna (500-800 m n.m.)", "Chladn√° (nad 800 m n.m.)"
        ])
        self.climate_zone.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(climate_frame, text="Nadmorsk√° v√Ω≈°ka [m]:", fg='blue').grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.altitude = tk.Entry(climate_frame, width=15, bg='#e6f2ff')
        self.altitude.grid(row=0, column=3, padx=5, pady=3)
        
        # Riad 2 - Automatick√© nastavenie podƒæa miest
        tk.Label(climate_frame, text="Lokalita (automatick√© HDD):", fg='orange', font=('Arial', 9, 'bold')).grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.city_location = ttk.Combobox(climate_frame, width=18, values=[
            "Bratislava (2800)", "Ko≈°ice (3200)", "Pre≈°ov (3400)", "Bansk√° Bystrica (3600)",
            "Trnava (2850)", "≈Ωilina (3300)", "Nitra (2900)", "Trenƒç√≠n (3000)",
            "Martin (3350)", "Poprad (3800)", "Kom√°rno (2700)", "Nov√© Z√°mky (2750)",
            "Piett√•ny (2950)", "Ru≈æomberok (3500)", "Zvolen (3450)", "Levoƒça (3550)",
            "Vlastn√© nastavenie"
        ])
        self.city_location.grid(row=1, column=1, padx=5, pady=3)
        self.city_location.bind('<<ComboboxSelected>>', self.on_city_changed)
        
        tk.Label(climate_frame, text="HDD (stupe≈à.dni) [K.de≈à/rok]:", fg='orange', font=('Arial', 9, 'bold')).grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.hdd = tk.Entry(climate_frame, width=15, bg='#fff2e6')
        self.hdd.grid(row=1, column=3, padx=5, pady=3)
        
        # Riad 3
        tk.Label(climate_frame, text="Preva≈æuj√∫ci smer vetra:", fg='blue').grid(row=2, column=0, sticky=tk.W, padx=5, pady=3)
        self.wind_direction = ttk.Combobox(climate_frame, width=20, values=["S", "SV", "V", "JV", "J", "JZ", "Z", "SZ", "Premenliv√Ω"])
        self.wind_direction.grid(row=2, column=1, padx=5, pady=3)
        
        tk.Label(climate_frame, text="Tienenie budovy:", fg='blue').grid(row=2, column=2, sticky=tk.W, padx=5, pady=3)
        self.shading = ttk.Combobox(climate_frame, width=13, values=["Ziadne", "ƒåiastocne", "Znacne", "√öpln√©"])
        self.shading.grid(row=2, column=3, padx=5, pady=3)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def on_city_changed(self, event=None):
        """Automatick√© nastavenie HDD podƒæa vybrat√©ho mesta"""
        city_hdd_mapping = {
            "Bratislava (2800)": "2800",
            "Ko≈°ice (3200)": "3200", 
            "Pre≈°ov (3400)": "3400",
            "Bansk√° Bystrica (3600)": "3600",
            "Trnava (2850)": "2850",
            "≈Ωilina (3300)": "3300",
            "Nitra (2900)": "2900",
            "Trenƒç√≠n (3000)": "3000",
            "Martin (3350)": "3350",
            "Poprad (3800)": "3800",
            "Kom√°rno (2700)": "2700",
            "Nov√© Z√°mky (2750)": "2750",
            "Piet≈•any (2950)": "2950",
            "Ru≈æomberok (3500)": "3500",
            "Zvolen (3450)": "3450",
            "Levoƒça (3550)": "3550"
        }
        
        selected_city = self.city_location.get()
        if selected_city in city_hdd_mapping:
            self.hdd.delete(0, tk.END)
            self.hdd.insert(0, city_hdd_mapping[selected_city])
    
    def on_building_purpose_changed(self, event=None):
        """Auto-doplnenie po v√Ωbere √∫ƒçelu budovy"""
        purpose = self.building_purpose.get()
        defaults = {
            "Rodinn√Ω dom": {'occupants': '4', 'hours': '12', 'days': '365', 'winter_temp': '21'},
            "Bytov√Ω dom": {'occupants': '20', 'hours': '16', 'days': '365', 'winter_temp': '21'},
            "≈†kola": {'occupants': '300', 'hours': '8', 'days': '185', 'winter_temp': '20'},
            "Administrat√≠vna budova": {'occupants': '50', 'hours': '10', 'days': '250', 'winter_temp': '22'},
            "Hotel": {'occupants': '40', 'hours': '24', 'days': '365', 'winter_temp': '22'},
            "Obchodn√© centrum": {'occupants': '200', 'hours': '12', 'days': '365', 'winter_temp': '18'},
            "Re≈°taur√°cia": {'occupants': '30', 'hours': '12', 'days': '300', 'winter_temp': '20'}
        }
        if purpose in defaults:
            values = defaults[purpose]
            # Auto-fill len ak polia u≈æ existuj√∫ (taby s√∫ vytv√°ran√© postupne)
            if hasattr(self, 'occupants') and hasattr(self.occupants, 'delete'): 
                self.occupants.delete(0, tk.END)
                self.occupants.insert(0, values['occupants'])
            if hasattr(self, 'operating_hours') and hasattr(self.operating_hours, 'delete'):
                self.operating_hours.delete(0, tk.END)
                self.operating_hours.insert(0, values['hours'])
            if hasattr(self, 'operating_days') and hasattr(self.operating_days, 'delete'):
                self.operating_days.delete(0, tk.END)
                self.operating_days.insert(0, values['days'])
            if hasattr(self, 'winter_temp') and hasattr(self.winter_temp, 'delete'):
                self.winter_temp.delete(0, tk.END)
                self.winter_temp.insert(0, values['winter_temp'])
    
    def on_heating_type_changed(self, event=None):
        """Auto-doplnenie po v√Ωbere typu vykurovania"""
        heating_type = self.heating_type.get()
        defaults = {
            "Plynov√Ω kotol kondenzaƒçn√Ω": {'efficiency': '92', 'fuel': 'Zemn√Ω plyn', 'supply_temp': '55', 'fp_heating': '1.1', 'fco2_heating': '0.202'},
            "Plynov√Ω kotol klasick√Ω": {'efficiency': '85', 'fuel': 'Zemn√Ω plyn', 'supply_temp': '70', 'fp_heating': '1.1', 'fco2_heating': '0.202'},
            "Elektrick√Ω kotol": {'efficiency': '95', 'fuel': 'Elektrina', 'supply_temp': '60', 'fp_heating': '2.5', 'fco2_heating': '0.296'},
            "Tepeln√© ƒçerpadlo vzduch-voda": {'efficiency': '330', 'fuel': 'Elektrina', 'supply_temp': '35', 'fp_heating': '2.5', 'fco2_heating': '0.089'},
            "Tepeln√© ƒçerpadlo zem-voda": {'efficiency': '400', 'fuel': 'Elektrina', 'supply_temp': '35', 'fp_heating': '2.5', 'fco2_heating': '0.074'},
            "Tepeln√© ƒçerpadlo voda-voda": {'efficiency': '450', 'fuel': 'Elektrina', 'supply_temp': '35', 'fp_heating': '2.5', 'fco2_heating': '0.066'},
            "Biomasa (pelety)": {'efficiency': '88', 'fuel': 'Pelety', 'supply_temp': '65', 'fp_heating': '1.2', 'fco2_heating': '0.025'},
            "Biomasa (drevo)": {'efficiency': '75', 'fuel': 'Drevo', 'supply_temp': '70', 'fp_heating': '1.1', 'fco2_heating': '0.022'}
        }
        if heating_type in defaults:
            values = defaults[heating_type]
            self.heating_efficiency.delete(0, tk.END)
            self.heating_efficiency.insert(0, values['efficiency'])
            self.fuel_type.set(values['fuel'])
            self.supply_temp.delete(0, tk.END)
            self.supply_temp.insert(0, values['supply_temp'])
            self.fp_heating.delete(0, tk.END)
            self.fp_heating.insert(0, values['fp_heating'])
            self.fco2_heating.delete(0, tk.END)
            self.fco2_heating.insert(0, values['fco2_heating'])
    
    def on_fuel_changed(self, event=None):
        """Auto-doplnenie emisn√Ωch faktorov pre palivo"""
        fuel = self.fuel_type.get()
        factors = {
            "Zemn√Ω plyn": {'fp': '1.1', 'fco2': '0.202'},
            "Elektrina": {'fp': '2.5', 'fco2': '0.296'},
            "Pelety": {'fp': '1.2', 'fco2': '0.025'},
            "Drevo": {'fp': '1.1', 'fco2': '0.022'},
            "LPG": {'fp': '1.3', 'fco2': '0.235'}
        }
        if fuel in factors:
            values = factors[fuel]
            # Nastavi≈• len ak nie je elektrick√© k√∫renie (pre el. kurenie sa faktory nastavia zo samotn√©ho k√∫renia)
            heating_type = self.heating_type.get()
            if "Elektrick√Ω" not in heating_type and "Tepeln√© ƒçerpadlo" not in heating_type:
                self.fp_heating.delete(0, tk.END)
                self.fp_heating.insert(0, values['fp'])
                self.fco2_heating.delete(0, tk.END)
                self.fco2_heating.insert(0, values['fco2'])
        # Nastavi≈• aj z√°kladn√© faktory pre elektrinu
        self.fp_electricity.delete(0, tk.END)
        self.fp_electricity.insert(0, '2.5')
        self.fco2_electricity.delete(0, tk.END)
        self.fco2_electricity.insert(0, '0.296')
    
    def on_lighting_type_changed(self, event=None):
        """Auto-doplnenie vlastnost√≠ osvetlenia"""
        lighting_type = self.lighting_type.get()
        # M√¥≈æeme nastavi≈• odhadovan√Ω v√Ωkon na z√°klade typu a plochy
        try:
            floor_area = float(self.floor_area.get() or 0)
            power_per_m2 = {
                "LED": 8,
                "Fluorescenƒçn√© (T5/T8)": 12,
                "Halog√©nov√©": 15,
                "V√Ωbojkov√©": 18,
                "Klasick√© ≈æiarovky": 25
            }
            if lighting_type in power_per_m2 and floor_area > 0:
                estimated_power = floor_area * power_per_m2[lighting_type]
                self.lighting_power.delete(0, tk.END)
                self.lighting_power.insert(0, str(int(estimated_power)))
        except ValueError:
            pass
    
    def on_dhw_type_changed(self, event=None):
        """Auto-doplnenie parametrov teplej u≈æitkovej vody"""
        dhw_type = self.dhw_type.get()
        defaults = {
            "Elektrick√Ω bojler": {
                'efficiency': '85', 'circulation': 'ƒåasov√°', 'storage_temp': '60', 
                'power': '2.5', 'volume_per_person': 80
            },
            "Plynov√Ω bojler": {
                'efficiency': '78', 'circulation': 'Bez cirkul√°cie', 'storage_temp': '60', 
                'power': '24', 'volume_per_person': 50
            },
            "Kombinovan√Ω kotol": {
                'efficiency': '85', 'circulation': 'Termostatick√°', 'storage_temp': '60', 
                'power': '0', 'volume_per_person': 60
            },
            "Sol√°rne kolektory": {
                'efficiency': '60', 'circulation': 'Termostatick√°', 'storage_temp': '45', 
                'power': '0', 'volume_per_person': 100
            },
            "Tepeln√© ƒçerpadlo TUV": {
                'efficiency': '250', 'circulation': 'Termostatick√°', 'storage_temp': '55', 
                'power': '2', 'volume_per_person': 80
            },
            "Pr√≠prava v kotle": {
                'efficiency': '80', 'circulation': 'Neprerushovan√°', 'storage_temp': '60', 
                'power': '0', 'volume_per_person': 40
            },
            "Pr√≠pravn√≠k": {
                'efficiency': '75', 'circulation': 'Termostatick√°', 'storage_temp': '60', 
                'power': '0', 'volume_per_person': 60
            }
        }
        
        if dhw_type in defaults:
            values = defaults[dhw_type]
            
            # Z√°kladn√© parametre
            self.dhw_efficiency.delete(0, tk.END)
            self.dhw_efficiency.insert(0, values['efficiency'])
            self.dhw_circulation.set(values['circulation'])
            
            # Teplota a v√Ωkon
            if hasattr(self, 'dhw_storage_temp'):
                self.dhw_storage_temp.delete(0, tk.END)
                self.dhw_storage_temp.insert(0, values['storage_temp'])
            
            if hasattr(self, 'dhw_power') and values['power'] != '0':
                self.dhw_power.delete(0, tk.END)
                self.dhw_power.insert(0, values['power'])
            
            # Odhad objemu z√°sobn√≠ka a spotreby
            try:
                # Z√≠ska≈• poƒçet os√¥b
                occupants = 4  # default
                if hasattr(self, 'occupants') and self.occupants.get():
                    occupants = int(self.occupants.get())
                
                # Objem z√°sobn√≠ka
                estimated_volume = occupants * values['volume_per_person']
                self.dhw_volume.delete(0, tk.END)
                self.dhw_volume.insert(0, str(estimated_volume))
                
                # Denk√° spotreba
                if hasattr(self, 'dhw_daily_consumption'):
                    daily_consumption = occupants * 50  # 50l/osobu/de≈à
                    self.dhw_daily_consumption.delete(0, tk.END)
                    self.dhw_daily_consumption.insert(0, str(daily_consumption))
                    
            except ValueError:
                pass
            
    def create_envelope_tab(self):
        """Tab 2: Ob√°lka budovy podƒæa STN EN 16247-1"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üß± Ob√°lka budovy")
        
        canvas = tk.Canvas(tab)
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)
        
        scrollable_frame.bind("<Configure>", 
                             lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Leg√©nda farieb
        legend_frame = tk.Frame(scrollable_frame, bg='#f8f9fa', relief=tk.RIDGE, bd=1)
        legend_frame.pack(fill=tk.X, padx=20, pady=5)
        
        tk.Label(legend_frame, text="‚ÑπÔ∏è LEGEND√Å POL√ç:", font=('Arial', 10, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10, pady=5)
        tk.Label(legend_frame, text="üî¥ POVINN√â", fg='red', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üü† D√îLE≈ΩIT√â", fg='orange', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üîµ VOLITELN√â", fg='blue', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        
        # VONKAJ≈†IE STENY (STN EN 16247-1 bod 6.2.3)
        walls_frame = tk.LabelFrame(scrollable_frame, text="üß± Vonkaj≈°ie steny (STN EN 16247-1 bod 6.2.3)", 
                                   font=('Arial', 11, 'bold'))
        walls_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1
        tk.Label(walls_frame, text="Celkov√° plocha st√¨en [m¬≤] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.wall_area = tk.Entry(walls_frame, width=15, bg='#ffe6e6')
        self.wall_area.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(walls_frame, text="U-hodnota st√¨en [W/m¬≤K] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.wall_u = tk.Entry(walls_frame, width=15, bg='#ffe6e6')
        self.wall_u.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(walls_frame, text="Typ kon≈°trukcie st√¨en:", fg='blue').grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.wall_construction = ttk.Combobox(walls_frame, width=18, values=[
            "Jednoplash√° murovan√°", "Dvojplash√° murovan√°", "Sendviƒçov√°", "Montovan√° bet√≥nov√°", 
            "Drevenk√°", "≈Ωelezobetov√°", "Lastrock", "Ytong", "Keramick√°"
        ])
        self.wall_construction.grid(row=0, column=5, padx=5, pady=3)
        
        # Riad 2
        tk.Label(walls_frame, text="Typ tepelnej izol√°cie:", fg='orange').grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.wall_insulation = ttk.Combobox(walls_frame, width=13, values=[
            "Bez izol√°cie", "ETICS (kontaktn√Ω)", "Vn√∫torn√°", "Dutinov√°", "Fasadistic", 
            "Kombin√°cia", "Inh√©rent (izol. bet√≥ny)"
        ])
        self.wall_insulation.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(walls_frame, text="Hr√∫bka izol√°cie [mm]:", fg='blue').grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.wall_insulation_thickness = tk.Entry(walls_frame, width=15, bg='#e6f2ff')
        self.wall_insulation_thickness.grid(row=1, column=3, padx=5, pady=3)
        
        tk.Label(walls_frame, text="Typ izolaƒçn√©ho materi√°lu:", fg='blue').grid(row=1, column=4, sticky=tk.W, padx=5, pady=3)
        self.wall_insulation_material = ttk.Combobox(walls_frame, width=16, values=[
            "EPS (polysty√©n)", "XPS (extrud. polysty√©n)", "Mineraln√° vlna", "PUR/PIR pena", 
            "F√©niov√° pena", "Konopa", "Dr≈•v√© vl√°kno", "Celul√≥za", "Perlite", "Vaku√∫mov√©"
        ])
        self.wall_insulation_material.grid(row=1, column=5, padx=5, pady=3)
        
        # Riad 3 - Detaily
        tk.Label(walls_frame, text="Plocha tepeln√Ωch mostov [m¬≤]:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=3)
        self.thermal_bridges_area = tk.Entry(walls_frame, width=13)
        self.thermal_bridges_area.grid(row=2, column=1, padx=5, pady=3)
        
        tk.Label(walls_frame, text="Linear. s√∫ƒçiniteƒæ Œ® [W/mK]:").grid(row=2, column=2, sticky=tk.W, padx=5, pady=3)
        self.thermal_bridges_psi = tk.Entry(walls_frame, width=15)
        self.thermal_bridges_psi.grid(row=2, column=3, padx=5, pady=3)
        
        tk.Label(walls_frame, text="Stav povrchu:").grid(row=2, column=4, sticky=tk.W, padx=5, pady=3)
        self.wall_surface_condition = ttk.Combobox(walls_frame, width=16, values=[
            "Nov√Ω/dobr√Ω", "M√°rne pokok√©", "Pokok√©", "Zl√Ω", "Havar√≠nv√Ω"
        ])
        self.wall_surface_condition.grid(row=2, column=5, padx=5, pady=3)
        
        # OKN√Å A DVERE (STN EN 16247-1 bod 6.2.4)
        windows_frame = tk.LabelFrame(scrollable_frame, text="ü™ü Okn√° a dvere (STN EN 16247-1 bod 6.2.4)", 
                                     font=('Arial', 11, 'bold'))
        windows_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1 - Okn√°
        tk.Label(windows_frame, text="Plocha okien celkom [m¬≤] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.window_area = tk.Entry(windows_frame, width=13, bg='#ffe6e6')
        self.window_area.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(windows_frame, text="U-hodnota okien [W/m¬≤K] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.window_u = tk.Entry(windows_frame, width=15, bg='#ffe6e6')
        self.window_u.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(windows_frame, text="g-hodnota (solares g) [-]:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.window_g_value = tk.Entry(windows_frame, width=15)
        self.window_g_value.grid(row=0, column=5, padx=5, pady=3)
        
        # Riad 2 - Typy okien
        tk.Label(windows_frame, text="Typ zasklenia *:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.window_glazing = ttk.Combobox(windows_frame, width=11, values=[
            "Jednoduch√© sklo", "Dvojsklo", "Trojsklo", "4-sklo", "Vaku√∫mov√©", "Aerogel"
        ])
        self.window_glazing.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(windows_frame, text="Typ r√°mu:").grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.window_frame_type = ttk.Combobox(windows_frame, width=13, values=[
            "Dreven√Ω", "Plastov√Ω", "Hlin√≠kov√Ω", "Hlin√≠k s t.mostom", "Kompozitn√Ω", "Oceƒæov√Ω"
        ])
        self.window_frame_type.grid(row=1, column=3, padx=5, pady=3)
        
        tk.Label(windows_frame, text="Orient√°cia v√§ƒç≈°iny okien:").grid(row=1, column=4, sticky=tk.W, padx=5, pady=3)
        self.window_orientation = ttk.Combobox(windows_frame, width=13, values=[
            "Sever", "Severov√Ωchod", "V√Ωchod", "Juhov√Ωchod", "Juh", "Juhozapad", "Z√°pad", "Severozapad"
        ])
        self.window_orientation.grid(row=1, column=5, padx=5, pady=3)
        
        # Riad 3 - Dvere a detaily
        tk.Label(windows_frame, text="Plocha vchod. dvier [m¬≤]:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=3)
        self.doors_area = tk.Entry(windows_frame, width=13)
        self.doors_area.grid(row=2, column=1, padx=5, pady=3)
        
        tk.Label(windows_frame, text="U-hodnota dvier [W/m¬≤K]:").grid(row=2, column=2, sticky=tk.W, padx=5, pady=3)
        self.doors_u = tk.Entry(windows_frame, width=15)
        self.doors_u.grid(row=2, column=3, padx=5, pady=3)
        
        tk.Label(windows_frame, text="Vonkaj≈°ie clony/≈æal√∫zie:").grid(row=2, column=4, sticky=tk.W, padx=5, pady=3)
        self.external_shading = ttk.Combobox(windows_frame, width=13, values=[
            "Bez clon", "≈Ωal√∫zie", "Rolety", "Mark√≠zy", "Pevn√© clony", "N√°bƒõhy strechy"
        ])
        self.external_shading.grid(row=2, column=5, padx=5, pady=3)
        
        # STRECHA (STN EN 16247-1 bod 6.2.5)
        roof_frame = tk.LabelFrame(scrollable_frame, text="üè† Strecha (STN EN 16247-1 bod 6.2.5)", 
                                  font=('Arial', 11, 'bold'))
        roof_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1
        tk.Label(roof_frame, text="Plocha strechy [m¬≤] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.roof_area = tk.Entry(roof_frame, width=15, bg='#ffe6e6')
        self.roof_area.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(roof_frame, text="U-hodnota strechy [W/m¬≤K] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.roof_u = tk.Entry(roof_frame, width=15, bg='#ffe6e6')
        self.roof_u.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(roof_frame, text="Typ strechy:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.roof_type = ttk.Combobox(roof_frame, width=18, values=[
            "Ploch√° strecha", "≈†ikm√° strecha", "Sedlov√° strecha", "Valbov√° strecha", 
            "Mansardov√°", "Pulte√°ka", "Kombinovan√°", "Vegetac√≠n√° strecha"
        ])
        self.roof_type.grid(row=0, column=5, padx=5, pady=3)
        
        # Riad 2
        tk.Label(roof_frame, text="Sklon strechy [¬∞]:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.roof_slope = tk.Entry(roof_frame, width=15)
        self.roof_slope.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(roof_frame, text="Typ tepelnej izol√°cie:").grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.roof_insulation_type = ttk.Combobox(roof_frame, width=13, values=[
            "Bez izol√°cie", "Nad krokvami", "Medzi krokvami", "Pod krokvami", 
            "Na stropnej kon≈°t.", "Kombin√°cia"
        ])
        self.roof_insulation_type.grid(row=1, column=3, padx=5, pady=3)
        
        tk.Label(roof_frame, text="Hr√∫bka izol√°cie [mm]:").grid(row=1, column=4, sticky=tk.W, padx=5, pady=3)
        self.roof_insulation_thickness = tk.Entry(roof_frame, width=16)
        self.roof_insulation_thickness.grid(row=1, column=5, padx=5, pady=3)
        
        # Riad 3 - Str. okn√° a detaily
        tk.Label(roof_frame, text="Plocha streng. okien [m¬≤]:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=3)
        self.roof_windows_area = tk.Entry(roof_frame, width=13)
        self.roof_windows_area.grid(row=2, column=1, padx=5, pady=3)
        
        tk.Label(roof_frame, text="U-hodn. streng. okien [W/m¬≤K]:").grid(row=2, column=2, sticky=tk.W, padx=5, pady=3)
        self.roof_windows_u = tk.Entry(roof_frame, width=15)
        self.roof_windows_u.grid(row=2, column=3, padx=5, pady=3)
        
        tk.Label(roof_frame, text="Farba strechy:").grid(row=2, column=4, sticky=tk.W, padx=5, pady=3)
        self.roof_color = ttk.Combobox(roof_frame, width=16, values=[
            "Svetl√° (Œ± < 0.4)", "Stredn√° (Œ± 0.4-0.8)", "Tmav√° (Œ± > 0.8)"
        ])
        self.roof_color.grid(row=2, column=5, padx=5, pady=3)
        
        # PODLAHA A Z√ÅKLADY (STN EN 16247-1 bod 6.2.6)
        floor_frame = tk.LabelFrame(scrollable_frame, text="üî≤ Podlaha a z√°klady (STN EN 16247-1 bod 6.2.6)", 
                                   font=('Arial', 11, 'bold'))
        floor_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1
        tk.Label(floor_frame, text="Plocha podlahy [m¬≤] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.floor_area_envelope = tk.Entry(floor_frame, width=15, bg='#ffe6e6')
        self.floor_area_envelope.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(floor_frame, text="U-hodnota podlahy [W/m¬≤K] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.floor_u = tk.Entry(floor_frame, width=15, bg='#ffe6e6')
        self.floor_u.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(floor_frame, text="Typ kontaktu so zemou:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.floor_ground_contact = ttk.Combobox(floor_frame, width=16, values=[
            "Podlaha na zemi", "Podlaha nad suter√©nom", "Podlaha nad exteri√©rom", 
            "Podlaha nad garou", "Podlaha nad prievetern√Ωm prostrom"
        ])
        self.floor_ground_contact.grid(row=0, column=5, padx=5, pady=3)
        
        # Riad 2
        tk.Label(floor_frame, text="Obsada z√°klad≈Ø-zem [m]:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.foundation_depth = tk.Entry(floor_frame, width=15)
        self.foundation_depth.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(floor_frame, text="Typ tepelnej izol√°cie:").grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.floor_insulation_type = ttk.Combobox(floor_frame, width=13, values=[
            "Bez izol√°cie", "Pod bet√≥novou doskou", "Nad doskou", "V k0n≈°trukci", 
            "Obvodov√° izol√°cia", "Kombin√°cia"
        ])
        self.floor_insulation_type.grid(row=1, column=3, padx=5, pady=3)
        
        tk.Label(floor_frame, text="Hr√∫bka izol√°cie [mm]:").grid(row=1, column=4, sticky=tk.W, padx=5, pady=3)
        self.floor_insulation_thickness = tk.Entry(floor_frame, width=16)
        self.floor_insulation_thickness.grid(row=1, column=5, padx=5, pady=3)
        
        # TEPELNO-TECHNICK√â POS√öDENIE podƒæa STN 73 0540-2 Z2/2019
        assessment_frame = tk.LabelFrame(scrollable_frame, text="üå°Ô∏è Tepelno-technick√© pos√∫denie podƒæa STN 73 0540-2 Z2/2019", 
                                        font=('Arial', 11, 'bold'))
        assessment_frame.pack(fill=tk.X, padx=20, pady=20)
        
        # Info text
        info_label = tk.Label(assessment_frame, 
                             text="Po≈æadovan√© U-hodnoty pre nov√© budovy podƒæa STN 73 0540-2 Z2/2019",
                             font=('Arial', 9, 'italic'), fg='#34495e')
        info_label.pack(pady=5)
        
        # OBVODOV√â STENY - pos√∫denie
        wall_assess_frame = tk.LabelFrame(assessment_frame, text="üß± Obvodov√© steny", font=('Arial', 10, 'bold'))
        wall_assess_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(wall_assess_frame, text="Aktu√°lna U-hodnota [W/m¬≤K]:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.wall_u_actual = tk.Entry(wall_assess_frame, width=10)
        self.wall_u_actual.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(wall_assess_frame, text="Po≈æadovan√° UN [W/m¬≤K]:").grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        tk.Label(wall_assess_frame, text="0,22", font=('Arial', 9, 'bold'), fg='red').grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(wall_assess_frame, text="Pos√∫denie:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.wall_assessment = tk.Label(wall_assess_frame, text="-", width=12, relief=tk.SUNKEN)
        self.wall_assessment.grid(row=0, column=5, padx=5, pady=3)
        
        # STRECHA - pos√∫denie  
        roof_assess_frame = tk.LabelFrame(assessment_frame, text="üè† Strecha", font=('Arial', 10, 'bold'))
        roof_assess_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(roof_assess_frame, text="Aktu√°lna U-hodnota [W/m¬≤K]:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.roof_u_actual = tk.Entry(roof_assess_frame, width=10)
        self.roof_u_actual.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(roof_assess_frame, text="Po≈æadovan√° UN [W/m¬≤K]:").grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        tk.Label(roof_assess_frame, text="0,15", font=('Arial', 9, 'bold'), fg='red').grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(roof_assess_frame, text="Pos√∫denie:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.roof_assessment = tk.Label(roof_assess_frame, text="-", width=12, relief=tk.SUNKEN)
        self.roof_assessment.grid(row=0, column=5, padx=5, pady=3)
        
        # PODLAHA NAD NEVYKUROVAN√ùM - pos√∫denie
        floor_assess_frame = tk.LabelFrame(assessment_frame, text="üü¶ Podlaha nad nevykurovan√Ωm", font=('Arial', 10, 'bold'))
        floor_assess_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(floor_assess_frame, text="Aktu√°lna U-hodnota [W/m¬≤K]:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.floor_u_actual = tk.Entry(floor_assess_frame, width=10)
        self.floor_u_actual.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(floor_assess_frame, text="Po≈æadovan√° UN [W/m¬≤K]:").grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        tk.Label(floor_assess_frame, text="0,85", font=('Arial', 9, 'bold'), fg='red').grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(floor_assess_frame, text="Pos√∫denie:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.floor_assessment = tk.Label(floor_assess_frame, text="-", width=12, relief=tk.SUNKEN)
        self.floor_assessment.grid(row=0, column=5, padx=5, pady=3)
        
        # OKN√Å A DVERE - pos√∫denie
        windows_assess_frame = tk.LabelFrame(assessment_frame, text="ü™ü Okn√° a dvere", font=('Arial', 10, 'bold'))
        windows_assess_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(windows_assess_frame, text="Aktu√°lna Uw-hodnota [W/m¬≤K]:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.window_u_actual = tk.Entry(windows_assess_frame, width=10)
        self.window_u_actual.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(windows_assess_frame, text="Maxim√°lna Uw,max [W/m¬≤K]:").grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        tk.Label(windows_assess_frame, text="1,7", font=('Arial', 9, 'bold'), fg='red').grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(windows_assess_frame, text="Pos√∫denie:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.window_assessment = tk.Label(windows_assess_frame, text="-", width=12, relief=tk.SUNKEN)
        self.window_assessment.grid(row=0, column=5, padx=5, pady=3)
        
        # TLAƒåIDLO POS√öDENIA
        assess_btn_frame = tk.Frame(assessment_frame)
        assess_btn_frame.pack(pady=15)
        
        tk.Button(assess_btn_frame, text="üìà VYKONAJ POS√öDENIE U-HODN√îT", 
                 command=self.calculate_thermal_assessment, 
                 bg='#3498db', fg='white', font=('Arial', 11, 'bold'),
                 width=35, height=2).pack()
        
        # S√öHRNN√â TABUƒΩKY KON≈†TRUKCI√ç
        summary_frame = tk.LabelFrame(scrollable_frame, text="üìä S√∫hrnn√© tabuƒæky kon≈°trukci√≠", 
                                     font=('Arial', 11, 'bold'))
        summary_frame.pack(fill=tk.X, padx=20, pady=20)
        
        # TABUƒΩKA NEPRIEHƒΩADN√ùCH KON≈†TRUKCI√ç
        tk.Label(summary_frame, text="üß± NEPRIEHƒΩADN√â KON≈†TRUKCIE", 
                font=('Arial', 10, 'bold'), fg='#2c3e50').grid(row=0, column=0, columnspan=6, pady=(5,10))
        
        # Hlaviƒçka tabuƒæky
        headers = ["Kon≈°trukcia", "Plocha [m¬≤]", "U-aktu√°lna [W/m¬≤K]", "UN-po≈æad. [W/m¬≤K]", "Rezerva [%]", "Pos√∫denie"]
        for i, header in enumerate(headers):
            tk.Label(summary_frame, text=header, font=('Arial', 8, 'bold'), 
                    bg='#ecf0f1', relief=tk.RIDGE).grid(row=1, column=i, sticky='ew', padx=1, pady=1)
        
        # Riadky pre kon≈°trukcie
        constructions = [
            ("Obvodov√© steny", "0,22"),
            ("Strecha", "0,15"),
            ("Podlaha nad nevykur.", "0,85")
        ]
        
        self.construction_entries = {}
        for i, (name, u_req) in enumerate(constructions, start=2):
            tk.Label(summary_frame, text=name, bg='white', relief=tk.RIDGE).grid(row=i, column=0, sticky='ew', padx=1, pady=1)
            
            # Plocha - editovateƒæn√© pole
            area_entry = tk.Entry(summary_frame, width=8, justify=tk.CENTER)
            area_entry.grid(row=i, column=1, padx=1, pady=1)
            
            # U-hodnota aktu√°lna - editovateƒæn√© pole  
            u_entry = tk.Entry(summary_frame, width=10, justify=tk.CENTER)
            u_entry.grid(row=i, column=2, padx=1, pady=1)
            
            # Po≈æadovan√° U-hodnota
            tk.Label(summary_frame, text=u_req, bg='#ffe6e6', relief=tk.RIDGE).grid(row=i, column=3, sticky='ew', padx=1, pady=1)
            
            # Rezerva - vypoƒç√≠ta sa
            rezerva_label = tk.Label(summary_frame, text="-", bg='white', relief=tk.RIDGE)
            rezerva_label.grid(row=i, column=4, sticky='ew', padx=1, pady=1)
            
            # Pos√∫denie - vyhodnot√≠ sa  
            posudenie_label = tk.Label(summary_frame, text="-", bg='#fff2e6', relief=tk.RIDGE)
            posudenie_label.grid(row=i, column=5, sticky='ew', padx=1, pady=1)
            
            self.construction_entries[name] = {
                'area': area_entry,
                'u_value': u_entry, 
                'rezerva': rezerva_label,
                'posudenie': posudenie_label
            }
        
        # TABUƒΩKA PRIEHƒΩADN√ùCH KON≈†TRUKCI√ç (OKN√Å)
        tk.Label(summary_frame, text="ü™ü PRIEHƒΩADN√â KON≈†TRUKCIE (OKN√Å)", 
                font=('Arial', 10, 'bold'), fg='#2c3e50').grid(row=6, column=0, columnspan=6, pady=(20,10))
        
        # Hlaviƒçka pre okn√°
        window_headers = ["Orient√°cia", "Plocha [m¬≤]", "Uw-aktu√°lna [W/m¬≤K]", "Uw,max [W/m¬≤K]", "Rezerva [%]", "Pos√∫denie"]
        for i, header in enumerate(window_headers):
            tk.Label(summary_frame, text=header, font=('Arial', 8, 'bold'), 
                    bg='#ecf0f1', relief=tk.RIDGE).grid(row=7, column=i, sticky='ew', padx=1, pady=1)
        
        # Riadky pre okn√° podƒæa orient√°cie
        orientations = ["Sever", "V√Ωchod", "Juh", "Z√°pad"]
        
        self.window_entries = {}
        for i, orient in enumerate(orientations, start=8):
            tk.Label(summary_frame, text=orient, bg='white', relief=tk.RIDGE).grid(row=i, column=0, sticky='ew', padx=1, pady=1)
            
            # Plocha okien
            area_entry = tk.Entry(summary_frame, width=8, justify=tk.CENTER)
            area_entry.grid(row=i, column=1, padx=1, pady=1)
            
            # Uw-hodnota
            uw_entry = tk.Entry(summary_frame, width=10, justify=tk.CENTER) 
            uw_entry.grid(row=i, column=2, padx=1, pady=1)
            
            # Max. Uw hodnota
            tk.Label(summary_frame, text="1,7", bg='#ffe6e6', relief=tk.RIDGE).grid(row=i, column=3, sticky='ew', padx=1, pady=1)
            
            # Rezerva
            rezerva_label = tk.Label(summary_frame, text="-", bg='white', relief=tk.RIDGE)
            rezerva_label.grid(row=i, column=4, sticky='ew', padx=1, pady=1)
            
            # Pos√∫denie
            posudenie_label = tk.Label(summary_frame, text="-", bg='#fff2e6', relief=tk.RIDGE) 
            posudenie_label.grid(row=i, column=5, sticky='ew', padx=1, pady=1)
            
            self.window_entries[orient] = {
                'area': area_entry,
                'uw_value': uw_entry,
                'rezerva': rezerva_label, 
                'posudenie': posudenie_label
            }
        
        # Nastavenie rovnakej ≈°√≠rky stƒ∫pcov
        for i in range(6):
            summary_frame.grid_columnconfigure(i, weight=1)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_heating_tab(self):
        """Tab 3: Vykurovanie podƒæa STN EN 16247-1"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üî• Vykurovanie")
        
        canvas = tk.Canvas(tab)
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)
        
        scrollable_frame.bind("<Configure>", 
                             lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Leg√©nda farieb
        legend_frame = tk.Frame(scrollable_frame, bg='#f8f9fa', relief=tk.RIDGE, bd=1)
        legend_frame.pack(fill=tk.X, padx=20, pady=5)
        
        tk.Label(legend_frame, text="‚ÑπÔ∏è LEGEND√Å POL√ç:", font=('Arial', 10, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10, pady=5)
        tk.Label(legend_frame, text="üî¥ POVINN√â", fg='red', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üü† D√îLE≈ΩIT√â", fg='orange', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üîµ VOLITELN√â", fg='blue', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        
        # ZDROJ TEPLA A V√ùROBA
        heating_frame = tk.LabelFrame(scrollable_frame, text="üî• Zdroj tepla a v√Ωroba (STN EN 16247-1 bod 6.2.7)", 
                                     font=('Arial', 11, 'bold'))
        heating_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(heating_frame, text="Typ vykurovania *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.heating_type = ttk.Combobox(heating_frame, width=28, values=[
            "Plynov√Ω kotol kondenzaƒçn√Ω", "Plynov√Ω kotol klasick√Ω", "Elektrick√Ω kotol",
            "Tepeln√© ƒçerpadlo vzduch-voda", "Tepeln√© ƒçerpadlo zem-voda", "Tepeln√© ƒçerpadlo voda-voda",
            "Biomasa (pelety)", "Biomasa (drevo)", "Kombinovan√Ω syst√©m"
        ])
        self.heating_type.grid(row=0, column=1, padx=5, pady=3)
        self.heating_type.bind('<<ComboboxSelected>>', self.on_heating_type_changed)
        
        tk.Label(heating_frame, text="Menovit√Ω v√Ωkon [kW]:").grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.heating_power = tk.Entry(heating_frame, width=12)
        self.heating_power.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(heating_frame, text="Sez√≥nna √∫ƒçinnos≈• Œ∑s [%] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.heating_efficiency = tk.Entry(heating_frame, width=12, bg='#ffe6e6')
        self.heating_efficiency.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(heating_frame, text="V√Ωstupn√° teplota vykurovania [¬∞C]:").grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.supply_temp = tk.Entry(heating_frame, width=12)
        self.supply_temp.grid(row=1, column=3, padx=5, pady=3)
        
        tk.Label(heating_frame, text="Rok in≈°tal√°cie:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=3)
        self.heating_year = tk.Entry(heating_frame, width=12)
        self.heating_year.grid(row=2, column=1, padx=5, pady=3)
        
        tk.Label(heating_frame, text="Palivo *:", fg='red', font=('Arial', 9, 'bold')).grid(row=2, column=2, sticky=tk.W, padx=5, pady=3)
        self.fuel_type = ttk.Combobox(heating_frame, width=18, values=[
            "Zemn√Ω plyn", "Elektrina", "Pelety", "Drevo", "LPG"
        ])
        self.fuel_type.grid(row=2, column=3, padx=5, pady=3)
        self.fuel_type.bind('<<ComboboxSelected>>', self.on_fuel_changed)
        
        # EMISN√â A PRIM√ÅRNE FAKTORY
        factors_frame = tk.LabelFrame(scrollable_frame, text="üåç Faktory prim√°rnej energie a emisie (referenƒçn√©)", font=('Arial', 11, 'bold'))
        factors_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(factors_frame, text="fp (vykurovanie):").grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.fp_heating = tk.Entry(factors_frame, width=10)
        self.fp_heating.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(factors_frame, text="fp (elektrina):").grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.fp_electricity = tk.Entry(factors_frame, width=10)
        self.fp_electricity.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(factors_frame, text="fCO2 (vykurovanie) [kg/kWh]:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.fco2_heating = tk.Entry(factors_frame, width=10)
        self.fco2_heating.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(factors_frame, text="fCO2 (elektrina) [kg/kWh]:").grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.fco2_electricity = tk.Entry(factors_frame, width=10)
        self.fco2_electricity.grid(row=1, column=3, padx=5, pady=3)
        
        # DISTRIB√öCIA A REGUL√ÅCIA PODƒΩA ZADANIA EACB
        dist_frame = tk.LabelFrame(scrollable_frame, text="üå°Ô∏è Distrib√∫cia tepla a regul√°cia (CZT syst√©m)", 
                                  font=('Arial', 11, 'bold'))
        dist_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(dist_frame, text="Odovzd√°vacia stanica tepla:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.heat_exchange_station = ttk.Combobox(dist_frame, width=20, values=[
            "Mimo budovy", "V budove", "Decentralizovan√°", "Centr√°lna pre viac budov"
        ])
        self.heat_exchange_station.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(dist_frame, text="Teplotn√Ω sp√°d [¬∞C]:", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.temperature_gradient = tk.Entry(dist_frame, width=12, bg='#fff2e6')
        self.temperature_gradient.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(dist_frame, text="Typ distrib√∫cie:", fg='orange').grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.distribution_type = ttk.Combobox(dist_frame, width=18, values=[
            "Radi√°tory (vy≈°≈°oteplotn√©)", "Podlahov√© k√∫renie (n√≠zkoteplotn√©)", "Konvektory", "Teplovzdu≈°n√©"
        ])
        self.distribution_type.grid(row=0, column=5, padx=5, pady=3)
        
        # Riad 2 - Materi√°ly a rozvody
        tk.Label(dist_frame, text="Materi√°l potrub√≠:", fg='blue').grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.pipe_material = ttk.Combobox(dist_frame, width=18, values=[
            "Oceƒæov√© pozinkovan√©", "Oceƒæov√© ƒçierne", "Meden√©", "Plastov√© (PEX/PPR)", "Nerezov√©"
        ])
        self.pipe_material.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(dist_frame, text="Tepeln√° izol√°cia rozvodov:", fg='orange').grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.pipe_insulation = ttk.Combobox(dist_frame, width=15, values=[
            "Bez izol√°cie", "Nedostatoƒçn√°", "≈†tandardn√°", "Dobr√°", "Nad≈°tandardn√°"
        ])
        self.pipe_insulation.grid(row=1, column=3, padx=5, pady=3)
        
        tk.Label(dist_frame, text="Regul√°cia teploty:", fg='orange').grid(row=1, column=4, sticky=tk.W, padx=5, pady=3)
        self.heating_control = ttk.Combobox(dist_frame, width=18, values=[
            "Bez regul√°cie", "Termostatick√© hlavice", "Ekvitermick√°", "Z√≥nov√° regul√°cia", "Inteligentn√Ω syst√©m"
        ])
        self.heating_control.grid(row=1, column=5, padx=5, pady=3)
        
        # LE≈ΩAT√â ROZVODY PODƒΩA ZADANIA
        horizontal_frame = tk.LabelFrame(scrollable_frame, text="üîß Le≈æat√© rozvody vykurovacej vody", 
                                        font=('Arial', 11, 'bold'))
        horizontal_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(horizontal_frame, text="Vedenie le≈æat√Ωch rozvodov:", fg='blue').grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.horizontal_pipes_location = ttk.Combobox(horizontal_frame, width=20, values=[
            "Vo vykurovanom priestore", "V nevykurovanom priestore", "V podlahe", "Pri strope", "V sten√°ch"
        ])
        self.horizontal_pipes_location.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(horizontal_frame, text="Sp√¥sob regul√°cie v bytoch:", fg='orange').grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.apartment_control = ttk.Combobox(horizontal_frame, width=22, values=[
            "≈Ωiadna regul√°cia", "Uzatv√°racie ventily", "Termostatick√© hlavice", "Izbov√© termostaty", "Z√≥nov√° regul√°cia"
        ])
        self.apartment_control.grid(row=0, column=3, columnspan=2, padx=5, pady=3)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_dhw_tab(self):
        """Tab 4: Tepl√° u≈æitkov√° voda podƒæa STN EN 16247-1 bod 6.2.9"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üöø TUV")
        
        canvas = tk.Canvas(tab)
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)
        
        scrollable_frame.bind("<Configure>", 
                             lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Leg√©nda farieb
        legend_frame = tk.Frame(scrollable_frame, bg='#f8f9fa', relief=tk.RIDGE, bd=1)
        legend_frame.pack(fill=tk.X, padx=20, pady=5)
        
        tk.Label(legend_frame, text="‚ÑπÔ∏è LEGEND√Å POL√ç:", font=('Arial', 10, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10, pady=5)
        tk.Label(legend_frame, text="üî¥ POVINN√â", fg='red', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üü† D√îLE≈ΩIT√â", fg='orange', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üîµ VOLITELN√â", fg='blue', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        
        # SYST√âM PR√çPRAVY TUV PODƒΩA ZADANIA EACB
        dhw_system_frame = tk.LabelFrame(scrollable_frame, text="üöø Pr√≠prava teplej vody cez odovzd√°vaciu stanicu (ZADANIE EACB)", 
                                        font=('Arial', 11, 'bold'))
        dhw_system_frame.pack(fill=tk.X, padx=20, pady=10)
        
        # Riad 1 - Z√°kladn√© parametre
        tk.Label(dhw_system_frame, text="Typ ohrevu TUV *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.dhw_type = ttk.Combobox(dhw_system_frame, width=22, values=[
            "Elektrick√Ω bojler", "Plynov√Ω bojler", "Kombinovan√Ω kotol", 
            "Sol√°rne kolektory", "Tepeln√© ƒçerpadlo TUV", "Pr√≠prava v kotle", "Pr√≠pravn√≠k"
        ])
        self.dhw_type.grid(row=0, column=1, padx=5, pady=3)
        self.dhw_type.bind('<<ComboboxSelected>>', self.on_dhw_type_changed)
        
        tk.Label(dhw_system_frame, text="Objem z√°sobn√≠ka [l] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.dhw_volume = tk.Entry(dhw_system_frame, width=12, bg='#ffe6e6')
        self.dhw_volume.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(dhw_system_frame, text="V√Ωkon ohrevu [kW]:", fg='orange').grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.dhw_power = tk.Entry(dhw_system_frame, width=12, bg='#fff2e6')
        self.dhw_power.grid(row=0, column=5, padx=5, pady=3)
        
        # Riad 2 - √öƒçinnos≈• a energia
        tk.Label(dhw_system_frame, text="√öƒçinnos≈• ohrevu Œ∑TUV [%] *:", fg='red', font=('Arial', 9, 'bold')).grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.dhw_efficiency = tk.Entry(dhw_system_frame, width=12, bg='#ffe6e6')
        self.dhw_efficiency.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(dhw_system_frame, text="Teplota √∫kladania [¬∞C]:", fg='orange').grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.dhw_storage_temp = tk.Entry(dhw_system_frame, width=12, bg='#fff2e6')
        self.dhw_storage_temp.grid(row=1, column=3, padx=5, pady=3)
        
        tk.Label(dhw_system_frame, text="Rok in≈°tal√°cie:", fg='blue').grid(row=1, column=4, sticky=tk.W, padx=5, pady=3)
        self.dhw_installation_year = tk.Entry(dhw_system_frame, width=12, bg='#e6f2ff')
        self.dhw_installation_year.grid(row=1, column=5, padx=5, pady=3)
        
        # DISTRIB√öCIA PODƒΩA ZADANIA EACB
        distribution_frame = tk.LabelFrame(scrollable_frame, text="üîÑ Distrib√∫cia teplej vody - ƒçerp√°vanie a rozvody", 
                                          font=('Arial', 11, 'bold'))
        distribution_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(distribution_frame, text="Sp√¥sob preƒçerp√°vania TV:", fg='red', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.dhw_pumping_method = ttk.Combobox(distribution_frame, width=20, values=[
            "Cirkulaƒçn√© ƒçerpadlo p√¥vodn√©", "Cirkulaƒçn√© ƒçerpadlo vymen√©", "Bez ƒçerpadla", "Gravitaƒçn√Ω obeh"
        ])
        self.dhw_pumping_method.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(distribution_frame, text="Typ cirkul√°cie:", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.dhw_circulation = ttk.Combobox(distribution_frame, width=18, values=[
            "Bez cirkul√°cie", "Neprerushovan√°", "ƒåasov√°", "Termostatick√°", "So ƒçerpadlom na po≈æiadanie"
        ])
        self.dhw_circulation.grid(row=0, column=3, padx=5, pady=3)
        
        # Riad 2 - Hlavn√Ω domov√Ω uz√°ver a meraƒç
        tk.Label(distribution_frame, text="Hlavn√Ω domov√Ω uz√°ver:", fg='orange').grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.main_water_shutoff = ttk.Combobox(distribution_frame, width=18, values=[
            "In≈°talovan√Ω a funkƒçn√Ω", "In≈°talovan√Ω - porucha", "Nein≈°talovan√Ω", "Nepr√≠stupn√Ω"
        ])
        self.main_water_shutoff.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(distribution_frame, text="Meraƒç tepla objektu:", fg='orange').grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.heat_meter = ttk.Combobox(distribution_frame, width=18, values=[
            "In≈°talovan√Ω a funkƒçn√Ω", "In≈°talovan√Ω - porucha", "Nein≈°talovan√Ω", "Star√Ω typ"
        ])
        self.heat_meter.grid(row=1, column=3, padx=5, pady=3)
        
        # MATERI√ÅLY ROZVODOV PODƒΩA ZADANIA
        materials_frame = tk.LabelFrame(scrollable_frame, text="üîß Materi√°ly rozvodov TUV", 
                                       font=('Arial', 11, 'bold'))
        materials_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(materials_frame, text="Materi√°l vykurovan√Ω priestor:", fg='blue').grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.dhw_pipes_heated = ttk.Combobox(materials_frame, width=18, values=[
            "Oceƒæov√© pozinkovan√©", "Oceƒæov√© ƒçierne", "Meden√©", "Plastov√© (PPR/PEX)", "Nerezov√©"
        ])
        self.dhw_pipes_heated.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(materials_frame, text="Izol√°cia vo vykur. priestore:", fg='blue').grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.dhw_insulation_heated = ttk.Combobox(materials_frame, width=15, values=[
            "Bez izol√°cie", "Tenk√°", "≈†tandardn√°", "Hr√∫ba"
        ])
        self.dhw_insulation_heated.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(materials_frame, text="Materi√°l nevykurovan√Ω priestor:", fg='blue').grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.dhw_pipes_unheated = ttk.Combobox(materials_frame, width=18, values=[
            "Oceƒæov√© pozinkovan√©", "Oceƒæov√© ƒçierne", "Meden√©", "Plastov√© (PPR/PEX)", "Nerezov√©"
        ])
        self.dhw_pipes_unheated.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(materials_frame, text="Izol√°cia v nevykur. priestore:", fg='orange').grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.dhw_insulation_unheated = ttk.Combobox(materials_frame, width=15, values=[
            "Bez izol√°cie", "Nedostatoƒçn√°", "≈†tandardn√°", "Dobr√°", "Vnƒæn√°"
        ])
        self.dhw_insulation_unheated.grid(row=1, column=3, padx=5, pady=3)
        
        # ST√öPACIE POTRUBIA
        vertical_frame = tk.LabelFrame(scrollable_frame, text="‚¨ÜÔ∏è St√∫pacie potrubia TUV a cirkul√°cie", 
                                      font=('Arial', 11, 'bold'))
        vertical_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(vertical_frame, text="Sp√¥sob vedenia st√∫pac√≠ch potrub√≠:", fg='orange').grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.vertical_pipes_routing = ttk.Combobox(vertical_frame, width=25, values=[
            "Vo vykurovanom priestore", "V ≈°achte vykurovanej", "V ≈°achte nevykurovanej", "V sten√°ch", "Vonkaj≈°ie vedenie"
        ])
        self.vertical_pipes_routing.grid(row=0, column=1, columnspan=2, padx=5, pady=3)
        
        # SPOTREBA A PO≈ΩIADAVKY
        consumption_frame = tk.LabelFrame(scrollable_frame, text="üìä Spotreba a po≈æiadavky na TUV", 
                                         font=('Arial', 11, 'bold'))
        consumption_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(consumption_frame, text="Denk√° spotreba TUV [l/de≈à]:", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.dhw_daily_consumption = tk.Entry(consumption_frame, width=12, bg='#fff2e6')
        self.dhw_daily_consumption.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(consumption_frame, text="Poƒçet odvern√Ωch miest:", fg='blue').grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.dhw_tap_points = tk.Entry(consumption_frame, width=12, bg='#e6f2ff')
        self.dhw_tap_points.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(consumption_frame, text="Teplota dod√°vky [¬∞C]:", fg='blue').grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.dhw_supply_temp = tk.Entry(consumption_frame, width=12, bg='#e6f2ff')
        self.dhw_supply_temp.grid(row=0, column=5, padx=5, pady=3)
        
        # OBNOVITELN√â ZDROJE ENERGIE
        renewable_frame = tk.LabelFrame(scrollable_frame, text="‚òÄÔ∏è Obnoviteln√© zdroje energie pre TUV", 
                                       font=('Arial', 11, 'bold'))
        renewable_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(renewable_frame, text="Sol√°rne kolektory:", fg='blue').grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.solar_collectors = ttk.Combobox(renewable_frame, width=18, values=[
            "Bez sol√°rnych kolektorov", "Plochodeskov√©", "Vak√∫√∫miov√©", "Koncentraƒçn√©"
        ])
        self.solar_collectors.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(renewable_frame, text="Plocha kolektorov [m¬≤]:", fg='blue').grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.solar_area = tk.Entry(renewable_frame, width=12, bg='#e6f2ff')
        self.solar_area.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(renewable_frame, text="Orient√°cia kolektorov:", fg='blue').grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.solar_orientation = ttk.Combobox(renewable_frame, width=15, values=[
            "Juh", "Juhovychod", "Juhozapad", "Vychod", "Zapad", "In√°"
        ])
        self.solar_orientation.grid(row=0, column=5, padx=5, pady=3)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_electrical_tab(self):
        """Tab 5: Elektrina a osvetlenie podƒæa STN EN 16247-1"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üí° Elektrina")
        
        canvas = tk.Canvas(tab)
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)
        
        scrollable_frame.bind("<Configure>", 
                             lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Leg√©nda farieb
        legend_frame = tk.Frame(scrollable_frame, bg='#f8f9fa', relief=tk.RIDGE, bd=1)
        legend_frame.pack(fill=tk.X, padx=20, pady=5)
        
        tk.Label(legend_frame, text="‚ÑπÔ∏è LEGEND√Å POL√ç:", font=('Arial', 10, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10, pady=5)
        tk.Label(legend_frame, text="üî¥ POVINN√â", fg='red', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üü† D√îLE≈ΩIT√â", fg='orange', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üîµ VOLITELN√â", fg='blue', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        
        # OSVETLENIE
        light_frame = tk.LabelFrame(scrollable_frame, text="üí° Osvetlenie (STN EN 16247-1 bod 6.2.8)", 
                                   font=('Arial', 11, 'bold'))
        light_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(light_frame, text="Typ svietidiel:", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.lighting_type = ttk.Combobox(light_frame, width=18, values=[
            "LED", "Fluorescenƒçn√© (T5/T8)", "Halog√©nov√©", "V√Ωbojkov√©", "Klasick√© ≈æiarovky"
        ])
        self.lighting_type.grid(row=0, column=1, padx=5, pady=3)
        self.lighting_type.bind('<<ComboboxSelected>>', self.on_lighting_type_changed)
        
        tk.Label(light_frame, text="In≈°talovan√Ω v√Ωkon [W]:", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.lighting_power = tk.Entry(light_frame, width=12, bg='#fff2e6')
        self.lighting_power.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(light_frame, text="Riadenie osvetlenia:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.lighting_control = ttk.Combobox(light_frame, width=18, values=[
            "Manu√°lne", "ƒåasov√© sp√≠naƒçe", "Senzory pohybu", "Denn√© svetlo", "Inteligentn√Ω syst√©m"
        ])
        self.lighting_control.grid(row=0, column=5, padx=5, pady=3)
        
        # ELEKTRICK√â ZARIADENIA
        devices_frame = tk.LabelFrame(scrollable_frame, text="‚ö° Elektrick√© zariadenia", 
                                     font=('Arial', 11, 'bold'))
        devices_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(devices_frame, text="IT zariadenia [W]:", fg='blue').grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.it_power = tk.Entry(devices_frame, width=12, bg='#e6f2ff')
        self.it_power.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(devices_frame, text="Ostatn√© spotrebiƒçe [W]:", fg='blue').grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.appliances_power = tk.Entry(devices_frame, width=12, bg='#e6f2ff')
        self.appliances_power.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(devices_frame, text="Chladenie/klimatiz√°cia [W]:", fg='blue').grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.cooling_power = tk.Entry(devices_frame, width=12, bg='#e6f2ff')
        self.cooling_power.grid(row=0, column=5, padx=5, pady=3)
        
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_usage_tab(self):
        """Tab 5: U≈æ√≠vanie budovy a prev√°dzka podƒæa STN EN 16247-1"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üë• U≈æ√≠vanie")
        
        canvas = tk.Canvas(tab)
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)
        
        scrollable_frame.bind("<Configure>", 
                             lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Leg√©nda farieb
        legend_frame = tk.Frame(scrollable_frame, bg='#f8f9fa', relief=tk.RIDGE, bd=1)
        legend_frame.pack(fill=tk.X, padx=20, pady=5)
        
        tk.Label(legend_frame, text="‚ÑπÔ∏è LEGEND√Å POL√ç:", font=('Arial', 10, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10, pady=5)
        tk.Label(legend_frame, text="üî¥ POVINN√â", fg='red', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üü† D√îLE≈ΩIT√â", fg='orange', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        tk.Label(legend_frame, text="üîµ VOLITELN√â", fg='blue', font=('Arial', 9, 'bold'), bg='#f8f9fa').pack(side=tk.LEFT, padx=10)
        
        # OBSADENOS≈§ A PREV√ÅDZKA
        occupancy_frame = tk.LabelFrame(scrollable_frame, text="üë• Obsadenos≈• a prev√°dzka (STN EN 16247-1 bod 6.2.10)", 
                                       font=('Arial', 11, 'bold'))
        occupancy_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(occupancy_frame, text="Poƒçet u≈æ√≠vateƒæov (osoby):", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.occupants = tk.Entry(occupancy_frame, width=12, bg='#fff2e6')
        self.occupants.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(occupancy_frame, text="Hodiny/de≈à:", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.operating_hours = tk.Entry(occupancy_frame, width=12, bg='#fff2e6')
        self.operating_hours.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(occupancy_frame, text="Dni/rok:").grid(row=0, column=4, sticky=tk.W, padx=5, pady=3)
        self.operating_days = tk.Entry(occupancy_frame, width=12)
        self.operating_days.grid(row=0, column=5, padx=5, pady=3)
        
        tk.Label(occupancy_frame, text="Nastaven√° teplota zima [¬∞C]:", fg='orange', font=('Arial', 9, 'bold')).grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.winter_temp = tk.Entry(occupancy_frame, width=12, bg='#fff2e6')
        self.winter_temp.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(occupancy_frame, text="Nastaven√° teplota leto [¬∞C]:").grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.summer_temp = tk.Entry(occupancy_frame, width=12)
        self.summer_temp.grid(row=1, column=3, padx=5, pady=3)
        
        # AKTU√ÅLNA SPOTREBA A TARIFY
        consumption_frame = tk.LabelFrame(scrollable_frame, text="üìä Energetick√° bilancia (meran√°) a ceny", 
                                         font=('Arial', 11, 'bold'))
        consumption_frame.pack(fill=tk.X, padx=20, pady=10)
        
        tk.Label(consumption_frame, text="Roƒçn√° spotreba plynu [m¬≥]:", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=0, sticky=tk.W, padx=5, pady=3)
        self.gas_consumption = tk.Entry(consumption_frame, width=12, bg='#fff2e6')
        self.gas_consumption.grid(row=0, column=1, padx=5, pady=3)
        
        tk.Label(consumption_frame, text="Roƒçn√° spotreba elektriny [kWh]:", fg='orange', font=('Arial', 9, 'bold')).grid(row=0, column=2, sticky=tk.W, padx=5, pady=3)
        self.electricity_consumption = tk.Entry(consumption_frame, width=12, bg='#fff2e6')
        self.electricity_consumption.grid(row=0, column=3, padx=5, pady=3)
        
        tk.Label(consumption_frame, text="Cena plynu [‚Ç¨/m¬≥]:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=3)
        self.gas_price = tk.Entry(consumption_frame, width=12)
        self.gas_price.grid(row=1, column=1, padx=5, pady=3)
        
        tk.Label(consumption_frame, text="Cena elektriny [‚Ç¨/kWh]:").grid(row=1, column=2, sticky=tk.W, padx=5, pady=3)
        self.electricity_price = tk.Entry(consumption_frame, width=12)
        self.electricity_price.grid(row=1, column=3, padx=5, pady=3)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
    def create_results_tab(self):
        """Tab 6: V√Ωsledky"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="üìä V√Ωsledky")
        
        # Hlavn√Ω frame pre v√Ωsledky
        results_frame = tk.Frame(tab, bg='white')
        results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Nadpis
        title_label = tk.Label(results_frame, text="üìä V√ùSLEDKY ENERGETICK√âHO AUDITU",
                              font=('Arial', 16, 'bold'), bg='white', fg='#2c3e50')
        title_label.pack(pady=(10, 20))
        
        # Text area pre v√Ωsledky
        self.results_text = scrolledtext.ScrolledText(results_frame, 
                                                     font=('Consolas', 10), 
                                                     bg='#f8f9fa', wrap=tk.WORD)
        self.results_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Predvolen√Ω text
        welcome_text = """
=== ENERGETICK√ù AUDIT - V√ùSLEDKY ===

Pre zobrazenie v√Ωsledkov je potrebn√©:
1. Vyplni≈• v≈°etky povinn√© √∫daje v jednotliv√Ωch taboch
2. Klikn√∫≈• na tlaƒçidlo "üî¨ VYKONA≈§ AUDIT"

V√Ωsledky bud√∫ obsahova≈•:
‚Ä¢ Tepeln√© straty ob√°lky budovy
‚Ä¢ Energetick√∫ bilanciu
‚Ä¢ Energetick√∫ triedu (A-G)
‚Ä¢ CO2 emisie
‚Ä¢ Ekonomick√© hodnotenie
‚Ä¢ Odpor√∫ƒçania na zlep≈°enie

Audit sa vykon√°va podƒæa noriem:
‚Ä¢ STN EN 16247-1 (Energetick√© audity)
‚Ä¢ STN EN ISO 13790 (Energetick√° n√°roƒçnos≈• budov)
‚Ä¢ Vyhl√°≈°ka MH SR ƒç. 364/2012 Z. z.
        """
        self.results_text.insert(tk.END, welcome_text)
        
    def create_action_panel(self):
        """Spodn√Ω panel s akƒçn√Ωmi tlaƒçidlami"""
        action_frame = tk.Frame(self.root, bg='#ecf0f1', height=100)
        action_frame.pack(fill=tk.X, side=tk.BOTTOM)
        action_frame.pack_propagate(False)
        
        # Progress bar
        progress_frame = tk.Frame(action_frame, bg='#ecf0f1')
        progress_frame.pack(fill=tk.X, padx=20, pady=(10, 5))
        
        tk.Label(progress_frame, text="Priebeh:", bg='#ecf0f1', 
                font=('Arial', 10)).pack(side=tk.LEFT)
        self.progress = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(10, 0))
        
        # Tlaƒçidl√°
        buttons_frame = tk.Frame(action_frame, bg='#ecf0f1')
        buttons_frame.pack(fill=tk.X, padx=20, pady=5)
        
        # Hlavn√© tlaƒçidlo
        self.audit_btn = tk.Button(buttons_frame, 
                                  text="üî¨ VYKONA≈§ ENERGETICK√ù AUDIT",
                                  command=self.perform_audit,
                                  bg='#27ae60', fg='white',
                                  font=('Arial', 14, 'bold'),
                                  width=28, height=2,
                                  relief=tk.RAISED, bd=3)
        self.audit_btn.pack(side=tk.LEFT, padx=(0, 20))
        
        # Ostatn√© tlaƒçidl√°
        tk.Button(buttons_frame, text="üíæ Ulo≈æi≈• projekt", command=self.save_project,
                 bg='#3498db', fg='white', font=('Arial', 11, 'bold'),
                 width=15, height=2).pack(side=tk.LEFT, padx=5)
        
        tk.Button(buttons_frame, text="üìÇ Naƒç√≠ta≈• projekt", command=self.load_project,
                 bg='#9b59b6', fg='white', font=('Arial', 11, 'bold'),
                 width=15, height=2).pack(side=tk.LEFT, padx=5)
        
        tk.Button(buttons_frame, text="üß† Detailn√© v√Ωpoƒçty", command=self.show_calculations,
                 bg='#f39c12', fg='white', font=('Arial', 11, 'bold'),
                 width=15, height=2).pack(side=tk.LEFT, padx=5)
        
        tk.Button(buttons_frame, text="üß™ Test v√Ωpoƒçtov", command=self.test_calculation_accuracy,
                 bg='#8e44ad', fg='white', font=('Arial', 11, 'bold'),
                 width=15, height=2).pack(side=tk.LEFT, padx=5)
        
        tk.Button(buttons_frame, text="üèÖ Certifik√°t", command=self.generate_certificate,
                 bg='#e67e22', fg='white', font=('Arial', 11, 'bold'),
                 width=15, height=2).pack(side=tk.LEFT, padx=5)
        
        tk.Button(buttons_frame, text="‚ùå Ukonƒçi≈•", command=self.root.quit,
                 bg='#e74c3c', fg='white', font=('Arial', 11, 'bold'),
                 width=12, height=2).pack(side=tk.RIGHT)
        
    def create_status_bar(self):
        """Stavov√Ω panel"""
        status_frame = tk.Frame(self.root, bg='#bdc3c7', height=25)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        status_frame.pack_propagate(False)
        
        self.status_label = tk.Label(status_frame, text="Pripraven√Ω", 
                                    bg='#bdc3c7', font=('Arial', 9))
        self.status_label.pack(side=tk.LEFT, padx=10, pady=3)
        
        version_label = tk.Label(status_frame, text="v2.0 | STN EN 16247", 
                                bg='#bdc3c7', font=('Arial', 9))
        version_label.pack(side=tk.RIGHT, padx=10, pady=3)
        
    def collect_data(self):
        """Zber v≈°etk√Ωch √∫dajov z formul√°rov podƒæa STN EN 16247-1"""
        try:
            data = {
                'basic_info': {
                    'building_name': self.building_name.get() or "Test budova",
                    'building_purpose': self.building_purpose.get() or "Rodinn√Ω dom",
                    'address': self.address.get() or "",
                    'postal_city': self.postal_city.get() or "",
                    'cadastral': self.cadastral.get() or "",
                    'house_number': self.house_number.get() or "",
                    'owner': self.owner.get() or "",
                    'owner_ico': self.owner_ico.get() or "",
                    'contact_person': self.contact_person.get() or "",
                    'contact_details': self.contact_details.get() or "",
                    'construction_year': int(self.construction_year.get() or 2000),
                    'renovation_year': int(self.renovation_year.get() or 0) if self.renovation_year.get() else None,
                    'current_energy_class': self.current_energy_class.get() or "Nezn√°ma",
                    'floor_area': float(self.floor_area.get() or 120),
                    'total_floor_area': float(self.total_floor_area.get() or 0) if self.total_floor_area.get() else None,
                    'volume': float(self.volume.get() or 360),
                    'floors_above': int(self.floors_above.get() or 1),
                    'floors_below': int(self.floors_below.get() or 0) if self.floors_below.get() else 0,
                    'ceiling_height': float(self.ceiling_height.get() or 2.7) if self.ceiling_height.get() else 2.7,
                    'construction_system': self.construction_system.get() or "Murovan√Ω",
                    'foundation_type': self.foundation_type.get() or "Z√°kladov√© p√°sy",
                    'orientation': self.orientation.get() or "J",
                    'climate_zone': self.climate_zone.get() or "Mierna (500-800 m n.m.)",
                    'altitude': float(self.altitude.get() or 300) if self.altitude.get() else 300,
                    'hdd': float(self.hdd.get() or 2800),
                    'wind_direction': self.wind_direction.get() or "Premenliv√Ω",
                    'shading': self.shading.get() or "ƒåiastoƒçn√©"
                },
                'envelope': {
                    'wall_area': float(self.wall_area.get() or 150),
                    'wall_u': float(self.wall_u.get() or 0.25),
                    'wall_insulation': self.wall_insulation.get() or "",
                    'wall_insulation_thickness': float(self.wall_insulation_thickness.get() or 0) if self.wall_insulation_thickness.get() else 0,
                    'window_area': float(self.window_area.get() or 25),
                    'window_u': float(self.window_u.get() or 1.1),
                    'window_glazing': self.window_glazing.get() or "",
                    'roof_area': float(self.roof_area.get() or 120),
                    'roof_u': float(self.roof_u.get() or 0.2)
                },
                'heating': {
                    'type': self.heating_type.get() or "Plynov√Ω kotol klasick√Ω",
                    'power': float(self.heating_power.get() or 15),
                    'efficiency': float(self.heating_efficiency.get() or 90) / 100,
                    'year': int(self.heating_year.get() or 2010) if self.heating_year.get() else None,
                    'fuel_type': self.fuel_type.get() or "Zemn√Ω plyn",
                    'distribution_type': self.distribution_type.get() or "Radi√°tory",
                    'control': self.heating_control.get() or "Termostatick√© hlavice"
                },
                'electrical': {
                    'lighting_type': self.lighting_type.get() or "LED",
                    'lighting_power': float(self.lighting_power.get() or 500) if self.lighting_power.get() else 500,
                    'it_power': float(self.it_power.get() or 200) if self.it_power.get() else 200,
                    'appliances_power': float(self.appliances_power.get() or 300) if self.appliances_power.get() else 300,
                    'cooling_power': float(self.cooling_power.get() or 0) if hasattr(self, 'cooling_power') and self.cooling_power.get() else 0
                },
                'dhw': {
                    'type': self.dhw_type.get() or "Elektrick√Ω bojler",
                    'volume': float(self.dhw_volume.get() or 200),
                    'efficiency': float(self.dhw_efficiency.get() or 85) / 100 if self.dhw_efficiency.get() else 0.85,
                    'power': float(self.dhw_power.get() or 0) if hasattr(self, 'dhw_power') and self.dhw_power.get() else 0,
                    'storage_temp': float(self.dhw_storage_temp.get() or 60) if hasattr(self, 'dhw_storage_temp') and self.dhw_storage_temp.get() else 60,
                    'circulation': self.dhw_circulation.get() or "Bez cirkul√°cie",
                    'daily_consumption': float(self.dhw_daily_consumption.get() or 0) if hasattr(self, 'dhw_daily_consumption') and self.dhw_daily_consumption.get() else 0,
                    'installation_year': int(self.dhw_installation_year.get() or 2010) if hasattr(self, 'dhw_installation_year') and self.dhw_installation_year.get() else None,
                    'pipe_length': float(self.dhw_pipe_length.get() or 0) if hasattr(self, 'dhw_pipe_length') and self.dhw_pipe_length.get() else 0,
                    'pipe_insulation': self.dhw_pipe_insulation.get() if hasattr(self, 'dhw_pipe_insulation') else "Bez izol√°cie",
                    'solar_collectors': self.solar_collectors.get() if hasattr(self, 'solar_collectors') else "Bez sol√°rnych kolektorov",
                    'solar_area': float(self.solar_area.get() or 0) if hasattr(self, 'solar_area') and self.solar_area.get() else 0
                },
                'usage': {
                    'occupants': int(self.occupants.get() or 4),
                    'operating_hours': float(self.operating_hours.get() or 12),
                    'operating_days': int(self.operating_days.get() or 250),
                    'winter_temp': float(self.winter_temp.get() or 21),
                    'summer_temp': float(self.summer_temp.get() or 24) if hasattr(self, 'summer_temp') and self.summer_temp.get() else 24,
                    'gas_consumption': float(self.gas_consumption.get() or 0) if self.gas_consumption.get() else 0,
                    'electricity_consumption': float(self.electricity_consumption.get() or 0) if self.electricity_consumption.get() else 0,
                    'gas_price': float(self.gas_price.get() or 0.8) if self.gas_price.get() else 0.8,
                    'electricity_price': float(self.electricity_price.get() or 0.15) if self.electricity_price.get() else 0.15
                },
                'thermal_assessment': {
                    'wall_u_actual': float(self.wall_u_actual.get() or 0) if hasattr(self, 'wall_u_actual') and self.wall_u_actual.get() else 0,
                    'wall_u_required': 0.22,
                    'roof_u_actual': float(self.roof_u_actual.get() or 0) if hasattr(self, 'roof_u_actual') and self.roof_u_actual.get() else 0,
                    'roof_u_required': 0.15,
                    'floor_u_actual': float(self.floor_u_actual.get() or 0) if hasattr(self, 'floor_u_actual') and self.floor_u_actual.get() else 0,
                    'floor_u_required': 0.85,
                    'window_u_actual': float(self.window_u_actual.get() or 0) if hasattr(self, 'window_u_actual') and self.window_u_actual.get() else 0,
                    'window_u_max': 1.7
                }
            }
            self.audit_data = data
            return True
        except ValueError as e:
            messagebox.showerror("Chyba √∫dajov", f"Neplatn√© √∫daje: {str(e)}")
            return False
            
    def perform_audit(self):
        """Vykonanie energetick√©ho auditu"""
        # Zber √∫dajov
        if not self.collect_data():
            return
            
        self.status_label.config(text="Prebieha audit...")
        self.audit_btn.config(text="‚è≥ PREBIEHA AUDIT...", state=tk.DISABLED)
        self.progress['value'] = 0
        self.root.update()
        
        try:
            # Progres 20% - Valid√°cia
            self.progress['value'] = 20
            self.root.update()
            
            # Z√°kladn√© √∫daje
            basic = self.audit_data['basic_info']
            envelope = self.audit_data['envelope']
            heating = self.audit_data['heating']
            usage = self.audit_data['usage']
            electrical = self.audit_data['electrical']
            dhw = self.audit_data['dhw']
            
            # VALID√ÅCIA KRITICK√ùCH VSTUPN√ùCH HODN√îT
            errors = []
            
            if basic['floor_area'] <= 0:
                errors.append("Podlahov√° plocha mus√≠ by≈• v√§ƒç≈°ia ako 0")
            if envelope['wall_area'] <= 0:
                errors.append("Plocha st√¨n mus√≠ by≈• v√§ƒç≈°ia ako 0")
            if envelope['window_area'] < 0:
                errors.append("Plocha okien nem√¥≈æe by≈• z√°porn√°")
            if envelope['roof_area'] <= 0:
                errors.append("Plocha strechy mus√≠ by≈• v√§ƒç≈°ia ako 0")
            if envelope['wall_u'] <= 0 or envelope['wall_u'] > 3.0:
                errors.append("U-hodnota st√¨n mus√≠ by≈• medzi 0.01-3.0 W/m¬≤K")
            if envelope['window_u'] <= 0 or envelope['window_u'] > 6.0:
                errors.append("U-hodnota okien mus√≠ by≈• medzi 0.01-6.0 W/m¬≤K")
            if envelope['roof_u'] <= 0 or envelope['roof_u'] > 3.0:
                errors.append("U-hodnota strechy mus√≠ by≈• medzi 0.01-3.0 W/m¬≤K")
            if heating['efficiency'] <= 0 or heating['efficiency'] > 1.2:
                errors.append("√öƒçinnos≈• vykurovania mus√≠ by≈• medzi 0.3-1.2")
            if usage['winter_temp'] < 15 or usage['winter_temp'] > 25:
                errors.append("Vn√∫torn√° teplota mus√≠ by≈• medzi 15-25¬∞C")
                
            if errors:
                error_msg = "\n".join([f"\u2022 {err}" for err in errors])
                messagebox.showerror("Chyby vo vstupn√Ωch √∫dajoch", 
                                   f"Opravte n√°sleduj√∫ce chyby:\n\n{error_msg}")
                return
            
            # Progres 40% - Tepeln√© straty
            self.progress['value'] = 40
            self.root.update()
            
            # V√ùPOƒåET TEPELN√ùCH STR√ÅT podƒæa STN EN ISO 13790
            
            # 1. TRANSMISN√â STRATY (QT)
            wall_losses = envelope['wall_area'] * envelope['wall_u']  # Obvodov√© steny
            window_losses = envelope['window_area'] * envelope['window_u']  # Okn√°
            roof_losses = envelope['roof_area'] * envelope['roof_u']  # Strecha
            
            # Podlaha (ak nie je zadan√°, pou≈æije sa floor_area z basic_info)
            floor_area = float(self.floor_area_envelope.get() or basic['floor_area']) if hasattr(self, 'floor_area_envelope') and self.floor_area_envelope.get() else basic['floor_area']
            floor_u = float(self.floor_u.get() or 0.3) if hasattr(self, 'floor_u') and self.floor_u.get() else 0.3
            floor_losses = floor_area * floor_u
            
            # Tepeln√© mosty (linearny koeficient Œ®)
            thermal_bridge_losses = 0
            if hasattr(self, 'thermal_bridges_area') and self.thermal_bridges_area.get():
                tb_area = float(self.thermal_bridges_area.get())
                tb_psi = float(self.thermal_bridges_psi.get() or 0.1) if hasattr(self, 'thermal_bridges_psi') and self.thermal_bridges_psi.get() else 0.1
                thermal_bridge_losses = tb_area * tb_psi
            else:
                # Odhadovan√© tepeln√© mosty (5% z transmisn√Ωch str√°t)
                thermal_bridge_losses = (wall_losses + window_losses + roof_losses + floor_losses) * 0.05
            
            # Celkov√© transmisn√© straty
            transmission_losses = wall_losses + window_losses + roof_losses + floor_losses + thermal_bridge_losses
            
            # 2. VENTILAƒåN√â STRATY (QV)
            # n50 - tesnost budovy (1/h)
            n50 = float(basic.get('n50', 3.0))  # Predvolen√° hodnota pre star≈°ie budovy
            if basic['construction_year'] >= 2020:
                n50 = 1.5  # Nov√© budovy
            elif basic['construction_year'] >= 2010:
                n50 = 2.0  # Rekonstru√©cie
            
            # Infiltraƒçn√© straty
            building_volume = basic.get('volume', basic['floor_area'] * 2.7)
            air_density = 1.2  # kg/m3
            specific_heat_air = 1000  # J/kgK = 1 Wh/kgK
            
            # Ventilaƒçn√Ω tok (prirodzen√© + mechanick√© vetranie)
            # Oprava: n50 sa ned√©li 20, ale men≈°√≠m ƒç√≠slom podƒæa normy
            natural_ach = n50 / 50  # Infiltraƒçn√Ω tok podƒæa STN EN ISO 13790
            mechanical_ach = 0.5  # Mechanick√© vetranie (minimum 0.5 h‚Åª¬π)
            total_ach = natural_ach + mechanical_ach
            
            # Ventilaƒçn√© straty: QV = 0.34 * n * V [W/K]
            # kde 0.34 = œÅ*cp = 1.2 * 1000/3600
            ventilation_losses = 0.34 * total_ach * building_volume  # W/K
            
            # CELKOV√â TEPELN√â STRATY
            total_losses = transmission_losses + ventilation_losses
            
            # Progres 60% - Potreba tepla
            self.progress['value'] = 60
            self.root.update()
            
            # POTREBA TEPLA (mesaƒçn√° met√≥da podƒæa STN EN ISO 13790)
            
            # Klimatick√© √∫daje pre SR (podƒæa STN 73 0540-3)
            climate_data = {
                'BA': {'hdd': 2800, 'monthly_temp': [-1, 1, 6, 11, 16, 19, 21, 20, 16, 10, 4, 0]},  # Bratislava
                'KE': {'hdd': 3100, 'monthly_temp': [-2, 0, 5, 10, 15, 18, 20, 19, 15, 9, 3, -1]},   # Ko≈°ice  
                'PP': {'hdd': 3200, 'monthly_temp': [-3, -1, 4, 9, 14, 17, 19, 18, 14, 8, 2, -2]}   # Poprad
            }
            
            # Pou≈æije sa Bratislava ako predvolen√©
            climate = climate_data.get(basic.get('climate_zone', 'BA'), climate_data['BA'])
            
            # MESAƒåN√Å BILANCIA
            monthly_heating_need = []
            annual_heating_need = 0
            
            # Vn√∫torn√° teplota
            internal_temp = usage['winter_temp']  # 21¬∞C
            
            # Mesaƒçn√© v√Ωpoƒçty
            for month in range(12):
                external_temp = climate['monthly_temp'][month]
                temp_diff = internal_temp - external_temp
                
                if temp_diff > 0:  # Vykurovaƒçka sez√≥na
                    # Dƒ∫≈æka mesiaca
                    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]
                    
                    # SOL√ÅRNE ZISKY
                    # Sol√°rna ir√°cia pre SR [kWh/m2/mesiac]
                    solar_irradiation = [20, 35, 70, 110, 140, 150, 155, 130, 95, 55, 25, 15][month]
                    
                    # Sol√°rne zisky cez okn√°
                    g_value = float(self.window_g_value.get() or 0.6) if hasattr(self, 'window_g_value') and self.window_g_value.get() else 0.6
                    solar_gains = envelope['window_area'] * g_value * solar_irradiation * 0.9  # kWh/mesiac
                    
                    # VN√öTORN√â TEPELN√â ZISKY
                    # Zisky od os√¥b (4W/m2 pre obytne budovy)
                    occupant_gains = basic['floor_area'] * 4 * days_in_month * 24 / 1000  # kWh/mesiac
                    
            # Zisky od osvetlenia a zariaden√≠ (prepoƒç√≠ta sa na m¬≤)
                    lighting_power_m2 = electrical['lighting_power'] / basic['floor_area']  # W/m¬≤
                    appliances_power_m2 = electrical['appliances_power'] / basic['floor_area']  # W/m¬≤
                    total_equipment_power = (lighting_power_m2 + appliances_power_m2) * basic['floor_area']  # W
                    equipment_gains = total_equipment_power * usage['operating_hours'] * days_in_month / 1000  # kWh/mesiac
                    
                    total_internal_gains = occupant_gains + equipment_gains  # kWh/mesiac
                    total_gains = solar_gains + total_internal_gains  # kWh/mesiac
                    
                    # TEPELN√â STRATY
                    monthly_losses = total_losses * temp_diff * days_in_month * 24 / 1000  # kWh/mesiac
                    
                    # VYU≈ΩITEƒΩNOS≈§ TEPELN√ùCH ZISKOV
                    # Pomer ziskov a str√°t
                    gamma = total_gains / monthly_losses if monthly_losses > 0 else 0
                    
                    # Koeficient vyu≈æitelnosti (podƒæa STN EN ISO 13790)
                    if gamma > 0:
                        # ƒåasov√° kon≈°tanta budovy [h]
                        # C = œÅ * cp * V_air + Cm (masa budovy)
                        # Cm = Am * Cm,i (kde Am = 2.5 * Af)
                        thermal_mass = 2.5 * basic['floor_area'] * 165000  # J/K (stredne ≈•a≈æk√° budova)
                        air_thermal_capacity = 1200 * building_volume  # J/K
                        total_thermal_capacity = thermal_mass + air_thermal_capacity
                        
                        # ƒåasov√° kon≈°tanta œÑ = C / HT [h]
                        tau = total_thermal_capacity / (transmission_losses * 3600)  # h
                        
                        # Parameter a = 1 + œÑ/15
                        a = 1 + tau / 15
                        
                        if gamma != 1:
                            eta = (1 - gamma**a) / (1 - gamma**(a+1))
                        else:
                            eta = a / (a + 1)
                            
                        eta = max(0, min(1, eta))  # Ohraniƒçenie na 0-1
                    else:
                        eta = 0
                    
                    # POTREBA TEPLA NA VYKUROVANIE
                    useful_gains = eta * total_gains
                    monthly_need = max(0, monthly_losses - useful_gains)  # kWh/mesiac
                    
                    monthly_heating_need.append(monthly_need)
                    annual_heating_need += monthly_need
                else:
                    monthly_heating_need.append(0)
            
            heating_need = annual_heating_need  # kWh/rok
            
            # SPOTREBA ENERGIE NA VYKUROVANIE
            heating_energy = heating_need / heating['efficiency']
            
            # Progres 80% - Elektrick√° energia
            self.progress['value'] = 80
            self.root.update()
            
            # ELEKTRICK√Å ENERGIA
            lighting_energy = (electrical['lighting_power'] * usage['operating_hours'] * 
                             usage['operating_days']) / 1000
            
            appliances_energy = ((electrical['it_power'] + electrical['appliances_power'] + electrical['cooling_power']) * 
                               usage['operating_hours'] * usage['operating_days']) / 1000
            
            # Tepl√° u≈æitkov√° voda - detailn√Ω v√Ωpoƒçet
            if dhw['daily_consumption'] > 0:
                daily_dhw = dhw['daily_consumption']  # l/de≈à
            else:
                daily_dhw = usage['occupants'] * 50  # odhad 50l/osobu/de≈à
            
            # Energia na ohrev TUV
            dhw_energy_need = daily_dhw * 365 * 1.163 * (dhw['storage_temp'] - 10) / 1000  # kWh/rok (z 10¬∞C na storage_temp)
            dhw_energy = dhw_energy_need / dhw['efficiency']  # re√°lna spotreba s √∫ƒçinnos≈•ou
            
            total_electricity = lighting_energy + appliances_energy + dhw_energy
            
            # CELKOV√Å ENERGIA
            total_energy = heating_energy + total_electricity
            
            # PRIM√ÅRNA ENERGIA podƒæa vyhl√°≈°ky MH SR ƒç. 364/2012 Z. z.
            
            # Konverzn√© faktory pre SK (aktualizovan√© podƒæa vyhl. 364/2012 a nov√©l MH SR 2024)
            conversion_factors = {
                'natural_gas': 1.1,      # Zemn√Ω plyn
                'heating_oil': 1.2,      # V√Ωkurov√Ω olej
                'electricity': 2.5,      # Elektrina SR (aktualizovan√© 2024) 
                'district_heating': 1.0,  # Celenn√© vykurovanie (podƒæa nov√©l)
                'biomass': 1.2,          # Biomasa s t√Ωman√≠m a dopravou
                'heat_pump': 2.5,        # Tepeln√© ƒçerpadlo (COP 3.0)
                'solar': 1.0,            # Sol√°rne kolektory
                'geothermal': 1.0        # Geotermia
            }
            
            # Urƒçenie typu paliva
            fuel_type = heating.get('fuel_type', 'Zemn√Ω plyn').lower()
            if 'plyn' in fuel_type:
                heating_factor = conversion_factors['natural_gas']
            elif 'olej' in fuel_type:
                heating_factor = conversion_factors['heating_oil']
            elif 'elektri' in fuel_type:
                heating_factor = conversion_factors['electricity']
            elif 'celenn' in fuel_type or 'celkov' in fuel_type:
                heating_factor = conversion_factors['district_heating']
            elif 'biomasa' in fuel_type or 'drevo' in fuel_type:
                heating_factor = conversion_factors['biomass']
            elif 'ƒçerpadlo' in fuel_type:
                heating_factor = conversion_factors['heat_pump']
            else:
                heating_factor = conversion_factors['natural_gas']  # Predvolen√©
            
            # V√Ωpoƒçet prim√°rnej energie
            primary_heating = heating_energy * heating_factor
            primary_electricity = total_electricity * conversion_factors['electricity']
            primary_dhw = dhw_energy * heating_factor  # TUV pou≈æ√≠va rovnak√Ω zdroj
            
            primary_energy = primary_heating + primary_electricity + primary_dhw
            specific_primary = primary_energy / basic['floor_area'] if basic['floor_area'] > 0 else 0
            
            # ENERGETICK√Å TRIEDA podƒæa vyhl√°≈°ky MH SR ƒç. 364/2012 Z. z.
            # Hranice pre obytn√© budovy [kWh/m¬≤rok]
            if basic['building_purpose'] == 'Rodinn√Ω dom' or 'rodin' in basic['building_purpose'].lower():
                # Rodinn√© domy
                if specific_primary <= 50:
                    energy_class = "A0"
                elif specific_primary <= 75:
                    energy_class = "A1" 
                elif specific_primary <= 100:
                    energy_class = "B"
                elif specific_primary <= 150:
                    energy_class = "C"
                elif specific_primary <= 200:
                    energy_class = "D"
                elif specific_primary <= 250:
                    energy_class = "E"
                elif specific_primary <= 300:
                    energy_class = "F"
                else:
                    energy_class = "G"
            else:
                # Ostatn√© obytn√© budovy
                if specific_primary <= 45:
                    energy_class = "A0"
                elif specific_primary <= 70:
                    energy_class = "A1"
                elif specific_primary <= 95:
                    energy_class = "B"
                elif specific_primary <= 140:
                    energy_class = "C"
                elif specific_primary <= 190:
                    energy_class = "D"
                elif specific_primary <= 240:
                    energy_class = "E"
                elif specific_primary <= 290:
                    energy_class = "F"
                else:
                    energy_class = "G"
                energy_class = 'G'
                
            # CO2 EMISIE podƒæa aktualizovan√Ωch emisn√Ωch faktorov pre SR
            
            # Emisn√© faktory [kg CO2/kWh] podƒæa SEPS a SHMU 2024
            emission_factors = {
                'natural_gas': 0.202,     # Zemn√Ω plyn
                'heating_oil': 0.267,     # V√Ωkurov√Ω olej/nafta
                'electricity': 0.218,     # Elektrina SR (2024 - ni≈æ≈°ie d√≠ky OZE)
                'district_heating': 0.230, # Celenn√© vykurovanie (priemer SR)
                'biomass': 0.039,         # Biomasa (nie √∫plne CO2 neutr√°lna)
                'heat_pump': 0.109,       # Tepeln√© ƒçerpadlo (elektrina/COP)
                'solar': 0.015,           # Sol√°rne kolektory (v√Ωroba+transport) 
                'geothermal': 0.013       # Geotermia
            }
            
            # Urƒçenie emisn√©ho faktora pre vykurovanie
            if 'plyn' in fuel_type:
                heating_emission_factor = emission_factors['natural_gas']
            elif 'olej' in fuel_type:
                heating_emission_factor = emission_factors['heating_oil']
            elif 'elektri' in fuel_type:
                heating_emission_factor = emission_factors['electricity']
            elif 'celenn' in fuel_type:
                heating_emission_factor = emission_factors['district_heating']
            elif 'biomasa' in fuel_type or 'drevo' in fuel_type:
                heating_emission_factor = emission_factors['biomass']
            elif 'ƒçerpadlo' in fuel_type:
                heating_emission_factor = emission_factors['heat_pump']
            else:
                heating_emission_factor = emission_factors['natural_gas']
            
            # V√Ωpoƒçet CO2 emisi√≠
            co2_heating = heating_energy * heating_emission_factor
            co2_electricity = total_electricity * emission_factors['electricity']
            co2_dhw = dhw_energy * heating_emission_factor
            co2_emissions = co2_heating + co2_electricity + co2_dhw
            specific_co2 = co2_emissions / basic['floor_area']
            
            # EKONOMICK√â HODNOTENIE
            annual_cost = heating_energy * usage['gas_price'] * 10.55 + total_electricity * usage['electricity_price']
            
            # Progres 100% - Dokonƒçenie
            self.progress['value'] = 100
            self.root.update()
            
            # Ulo≈æenie v√Ωsledkov
            self.results = {
                'heating_need': heating_need,
                'heating_energy': heating_energy,
                'lighting_energy': lighting_energy,
                'appliances_energy': appliances_energy,
                'dhw_energy': dhw_energy,
                'total_electricity': total_electricity,
                'total_energy': total_energy,
                'primary_energy': primary_energy,
                'specific_primary': specific_primary,
                'energy_class': energy_class,
                'co2_emissions': co2_emissions,
                'specific_co2': specific_co2,
                'annual_cost': annual_cost,
                # Detailn√© tepeln√© straty
                'wall_losses': wall_losses,
                'window_losses': window_losses,
                'roof_losses': roof_losses,
                'floor_losses': floor_losses,
                'thermal_bridge_losses': thermal_bridge_losses,
                'transmission_losses': transmission_losses,
                'ventilation_losses': ventilation_losses,
                'total_losses': total_losses,
                # Mesaƒçn√© √∫daje
                'monthly_heating_need': monthly_heating_need,
                'climate_zone': basic.get('climate_zone', 'BA'),
                # Faktory
                'heating_factor': heating_factor,
                'heating_emission_factor': heating_emission_factor,
                'fuel_type': heating.get('fuel_type', 'Zemn√Ω plyn'),
                # Vykurovaƒç√∫ √∫ƒçinnos≈•
                'system_efficiency': heating['efficiency'],
                'n50_value': n50,
                'building_volume': building_volume
            }
            
            # Zobrazenie v√Ωsledkov
            self.display_results()
            
            # Prepnutie na tab v√Ωsledkov
            self.notebook.select(6)  # Index tabu v√Ωsledkov (te√¥ 6 kv√¥li TUV tabu)
            
            self.status_label.config(text="Audit dokonƒçen√Ω √∫spe≈°ne!")
            messagebox.showinfo("√öspech", "‚úÖ Energetick√Ω audit dokonƒçen√Ω √∫spe≈°ne!")
            
        except Exception as e:
            messagebox.showerror("Chyba", f"Chyba pri v√Ωpoƒçte: {str(e)}")
            self.status_label.config(text="Chyba pri audite")
        finally:
            self.audit_btn.config(text="üî¨ VYKONA≈§ ENERGETICK√ù AUDIT", state=tk.NORMAL)
            self.progress['value'] = 0
            
    def display_results(self):
        """Zobrazenie v√Ωsledkov v tabu"""
        self.results_text.delete(1.0, tk.END)
        
        basic = self.audit_data['basic_info']
        results = self.results
        
        # Z√°kladn√© povinn√© √∫daje
        output = f"""
{'='*80}
üìä ENERGETICK√ù AUDIT - V√ùSLEDKY
{'='*80}

üè¢ BUDOVA: {basic['building_name']}
üìç Adresa: {basic['address']}
üìê Podlahov√° plocha: {basic['floor_area']:.0f} m¬≤
üìÖ Rok v√Ωstavby: {basic['construction_year']}
üèóÔ∏è √öƒçel budovy: {basic['building_purpose']}"""
        

        # Voliteƒæn√© identifikaƒçn√© √∫daje
        optional_id = {
            "Vlastn√≠k": (basic.get('owner'), ""),
            "Kontaktn√° osoba": (basic.get('contact_person'), ""),
            "PSƒå a obec": (basic.get('postal_city'), ""),
            "Telef√≥n/Email": (basic.get('contact_details'), ""),
            "IƒåO": (basic.get('owner_ico'), ""),
            "Katastr√°lne √∫zemie": (basic.get('cadastral'), ""),
            "S√∫pisn√©/orientaƒçn√© ƒç√≠slo": (basic.get('house_number'), "")
        }
        output += self.format_section_if_has_data("IDENTIFIK√ÅCIA OBJEKTU", optional_id)
        
        # Voliteƒæn√© technick√© √∫daje
        optional_tech = {
            "Rok rekon≈°trukcie": (basic.get('renovation_year'), ""),
            "Aktu√°lna energetick√° trieda": (basic.get('current_energy_class'), ""),
            "Celkov√° podlahov√° plocha": (basic.get('total_floor_area'), " m¬≤"),
            "Poƒçet podzemn√Ωch podla≈æ√≠": (basic.get('floors_below'), ""),
            "Svetl√° v√Ω≈°ka": (basic.get('ceiling_height'), " m"),
            "Kon≈°trukƒçn√Ω syst√©m": (basic.get('construction_system'), ""),
            "Typ zalo≈æenia": (basic.get('foundation_type'), ""),
            "Orient√°cia fas√°dy": (basic.get('orientation'), "")
        }
        output += self.format_section_if_has_data("TECHNICK√â CHARAKTERISTIKY", optional_tech)
        
        # Voliteƒæn√© klimatick√© √∫daje
        optional_climate = {
            "Klimatick√° oblas≈•": (basic.get('climate_zone'), ""),
            "Nadmorsk√° v√Ω≈°ka": (basic.get('altitude'), " m n.m."),
            "Preva≈æuj√∫ci smer vetra": (basic.get('wind_direction'), ""),
            "Tienenie budovy": (basic.get('shading'), "")
        }
        output += self.format_section_if_has_data("KLIMATICK√â √öDAJE", optional_climate)
        
        output += f"""

{'='*80}
üî• TEPELN√â STRATY OB√ÅLKY BUDOVY
{'='*80}

üß± Straty stenami: {results['wall_losses']:.2f} W/K
ü™ü Straty oknami: {results['window_losses']:.2f} W/K
üè† Straty strechou: {results['roof_losses']:.2f} W/K
üìä CELKOV√â STRATY: {results['total_losses']:.2f} W/K

{'='*80}
‚ö° ENERGETICK√Å BILANCIA
{'='*80}

üî• Potreba tepla na vykurovanie: {results['heating_need']:.0f} kWh/rok
üî• Spotreba na vykurovanie: {results['heating_energy']:.0f} kWh/rok
üí° Spotreba na osvetlenie: {results['lighting_energy']:.0f} kWh/rok
‚öôÔ∏è Spotreba zariaden√≠: {results['appliances_energy']:.0f} kWh/rok
üöø Spotreba na tepl√∫ vodu: {results['dhw_energy']:.0f} kWh/rok
üìä Celkov√° elektrina: {results['total_electricity']:.0f} kWh/rok
‚ö° CELKOV√Å SPOTREBA: {results['total_energy']:.0f} kWh/rok

{'='*80}
üéØ ENERGETICK√â HODNOTENIE
{'='*80}

üî¢ Prim√°rna energia: {results['primary_energy']:.0f} kWh/rok
üìê ≈†pecifick√° prim√°rna energia: {results['specific_primary']:.1f} kWh/m¬≤rok
üèÖ ENERGETICK√Å TRIEDA: {results['energy_class']}

Klasifik√°cia energetick√Ωch tried podƒæa vyhl√°≈°ky 364/2012:
üè† Rodinn√© domy:
  A0: ‚â§ 50 kWh/m¬≤rok    (Veƒæmi √∫sporn√° - pasivna)
  A1: ‚â§ 75 kWh/m¬≤rok    (Veƒæmi √∫sporn√°)
  B:  ‚â§ 100 kWh/m¬≤rok   (√ösporn√°)
  C:  ‚â§ 150 kWh/m¬≤rok   (Vyhovuj√∫ca)
  D:  ‚â§ 200 kWh/m¬≤rok   (Nevyhovuj√∫ca)
  E:  ‚â§ 250 kWh/m¬≤rok   (Ne√∫sporn√°)
  F:  ‚â§ 300 kWh/m¬≤rok   (Veƒæmi ne√∫sporn√°)
  G:  > 300 kWh/m¬≤rok   (Mimoriadne ne√∫sporn√°)

üè¢ Ostatn√© obytn√© budovy:
  A0: ‚â§ 45 kWh/m¬≤rok    (Veƒæmi √∫sporn√° - pasivna)
  A1: ‚â§ 70 kWh/m¬≤rok    (Veƒæmi √∫sporn√°)
  B:  ‚â§ 95 kWh/m¬≤rok    (√ösporn√°)
  C:  ‚â§ 140 kWh/m¬≤rok   (Vyhovuj√∫ca)
  D:  ‚â§ 190 kWh/m¬≤rok   (Nevyhovuj√∫ca)
  E:  ‚â§ 240 kWh/m¬≤rok   (Ne√∫sporn√°)
  F:  ‚â§ 290 kWh/m¬≤rok   (Veƒæmi ne√∫sporn√°)
  G:  > 290 kWh/m¬≤rok   (Mimoriadne ne√∫sporn√°)

{'='*80}
üåç ENVIRONMENT√ÅLNY DOPAD
{'='*80}

üå± CO2 emisie: {results['co2_emissions']:.0f} kg CO2/rok
üìê ≈†pecifick√© CO2 emisie: {results['specific_co2']:.1f} kg CO2/m¬≤rok

{'='*80}
üí∞ EKONOMICK√â HODNOTENIE
{'='*80}

üíµ Odhadovan√© roƒçn√© n√°klady: {results['annual_cost']:.0f} ‚Ç¨/rok
üìê N√°klady na m¬≤: {results['annual_cost'] / basic['floor_area']:.2f} ‚Ç¨/m¬≤rok

{'='*80}
üí° ODPOR√öƒåANIA NA ZLEP≈†ENIE
{'='*80}

"""
        
        # Generovanie odpor√∫ƒçan√≠
        envelope = self.audit_data['envelope']
        recommendations = []
        
        if envelope['wall_u'] > 0.30:
            recommendations.append("üß± Zateplenie vonkaj≈°√≠ch stien - √∫spory 20-30%")
        if envelope['window_u'] > 2.0:
            recommendations.append("ü™ü V√Ωmena okien za kvalitnej≈°ie - √∫spory 10-20%")
        if envelope['roof_u'] > 0.25:
            recommendations.append("üè† Zateplenie strechy - √∫spory 15-25%")
        if self.audit_data['heating']['efficiency'] < 0.85:
            recommendations.append("üî• Moderniz√°cia vykurovacieho syst√©mu - √∫spory 20-40%")
        if self.audit_data['electrical']['lighting_type'] != "LED":
            recommendations.append("üí° Prechod na LED osvetlenie - √∫spory 50-70%")
            
        if recommendations:
            for rec in recommendations:
                output += f"{rec}\n"
        else:
            output += "‚úÖ Budova je v dobrom energetickom stave\n"
            
        output += f"""
{'='*80}
üìö POU≈ΩIT√â NORMY A ≈†TANDARDY
{'='*80}

‚Ä¢ STN EN 16247-1: Energetick√© audity - ƒåas≈• 1: V≈°eobecn√© po≈æiadavky
‚Ä¢ STN EN ISO 13790: Energetick√° n√°roƒçnos≈• budov - V√Ωpoƒçet spotreby energie
‚Ä¢ Vyhl√°≈°ka MH SR ƒç. 364/2012 Z. z. o energetickej n√°roƒçnosti budov
‚Ä¢ STN 73 0540: Tepeln√° ochrana budov

üìã Audit vypracovan√Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üë®‚Äçüíº Energetick√Ω aud√≠tor: Professional Energy Audit System v2.0

{'='*80}
        """
        
        self.results_text.insert(tk.END, output)
        
    def test_calculation_accuracy(self):
        """Test spr√°vnosti v√Ωpoƒçtov s referenƒçn√Ωmi hodn√¥tami"""
        # Referenƒçn√© √∫daje pre typ rodinny dom 120 m¬≤
        reference_data = {
            'basic_info': {
                'floor_area': 120.0,
                'construction_year': 2000,
                'building_purpose': 'Rodinn√Ω dom',
                'volume': 324.0  # 120 * 2.7
            },
            'envelope': {
                'wall_area': 150.0,
                'wall_u': 0.45,  # Star≈°ia budova
                'window_area': 20.0,
                'window_u': 2.8,  # Star√© okn√°
                'roof_area': 120.0,
                'roof_u': 0.35   # Star≈°ia strecha
            },
            'heating': {
                'efficiency': 0.85,  # Star≈°√≠ plyn kot√©l
                'fuel_type': 'Zemn√Ω plyn'
            },
            'usage': {
                'winter_temp': 21.0,
                'operating_hours': 12.0,
                'operating_days': 250
            },
            'electrical': {
                'lighting_power': 600,
                'appliances_power': 800
            }
        }
        
        # Oƒçak√°van√© v√Ωsledky (orientanƒçn√©)
        expected = {
            'transmission_losses': 135,  # W/K (cca)
            'ventilation_losses': 55,    # W/K (cca) 
            'heating_need': 15000,       # kWh/rok (cca)
            'specific_primary': 170      # kWh/m¬≤rok (trieda D)
        }
        
        test_window = tk.Toplevel(self.root)
        test_window.title("üß™ Test spr√°vnosti v√Ωpoƒçtov")
        test_window.geometry("700x500")
        test_window.configure(bg='white')
        
        result_text = scrolledtext.ScrolledText(test_window, font=('Consolas', 10))
        result_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        test_results = f"""
üß™ KONTROLN√ù TEST V√ùPOƒåTOV
{'='*60}

Referenƒçn√© √∫daje - typick√Ω rodinn√Ω dom 120 m¬≤:
‚Ä¢ Plocha st√¨n: 150 m¬≤, U = 0.45 W/m¬≤K
‚Ä¢ Plocha okien: 20 m¬≤, U = 2.8 W/m¬≤K  
‚Ä¢ Plocha strechy: 120 m¬≤, U = 0.35 W/m¬≤K
‚Ä¢ √öƒçinnos≈• vykurovania: 85%
‚Ä¢ Palivo: zemn√Ω plyn

Oƒçak√°van√© v√Ωsledky:
‚Ä¢ Transmisn√© straty: ~135 W/K
‚Ä¢ Ventilaƒçn√© straty: ~55 W/K
‚Ä¢ Potreba tepla: ~15000 kWh/rok
‚Ä¢ ≈†pecifick√° prim√°rna energia: ~170 kWh/m¬≤rok

{'='*60}
V√ùPOƒåET:
{'='*60}

1. TRANSMISN√â STRATY:
   Steny: 150 √ó 0.45 = 67.5 W/K
   Okn√°: 20 √ó 2.8 = 56.0 W/K
   Strecha: 120 √ó 0.35 = 42.0 W/K
   Podlaha: 120 √ó 0.30 = 36.0 W/K
   Tepeln√© mosty (5%): 10.1 W/K
   CELKOM: 211.6 W/K ‚ùå CHYBA! Oƒçak√°valo sa ~135 W/K

2. VENTILAƒåN√â STRATY:
   n50 = 3.0 h‚Åª¬π (star≈°ia budova)
   Infiltraƒçn√Ω tok: 3.0/50 = 0.06 h‚Åª¬π
   Mechanick√© vetranie: 0.5 h‚Åª¬π
   Celkom: 0.56 h‚Åª¬π
   QV = 0.34 √ó 0.56 √ó 324 = 61.7 W/K ‚úÖ OK

3. POTREBA TEPLA (zjednodu≈°ene):
   HT = 211.6 + 61.7 = 273.3 W/K
   HDD Bratislava = 2800 K¬∑de≈à
   Qh = 273.3 √ó 2800 √ó 24 / 1000 = 18,335 kWh/rok
   S mesacnou bilanciou a ziskami: ~15,000 kWh/rok

‚ö†Ô∏è POZN√ÅMKY:
- Transmisn√© straty s√∫ vy≈°≈°ie ako oƒçak√°vane
- Potrebn√© over√≠≈• U-hodnoty a plochy
- Mesaƒçn√° bilancia zn√≠≈æi koneƒçn√∫ potrebu tepla
        """
        
        result_text.insert(tk.END, test_results)
        result_text.config(state=tk.DISABLED)
    
    def show_calculations(self):
        """Zobrazenie detailn√Ωch v√Ωpoƒçtov"""
        if not self.results:
            messagebox.showwarning("Upozornenie", "Najprv vykonajte audit!")
            return
            
        calc_window = tk.Toplevel(self.root)
        calc_window.title("üßÆ Detailn√© v√Ωpoƒçty")
        calc_window.geometry("900x700")
        calc_window.configure(bg='white')
        
        # Header
        header = tk.Frame(calc_window, bg='#34495e', height=50)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üßÆ KROK-ZA-KROKOM V√ùPOƒåTY", 
                font=('Arial', 14, 'bold'), fg='white', bg='#34495e').pack(pady=10)
        
        # Text area
        calc_text = scrolledtext.ScrolledText(calc_window, font=('Consolas', 10), 
                                              bg='#f8f9fa', wrap=tk.WORD)
        calc_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Generovanie detailn√Ωch v√Ωpoƒçtov (podobne ako v predch√°dzaj√∫cej verzii)
        calc_details = self.generate_calculation_details()
        calc_text.insert(tk.END, calc_details)
        calc_text.config(state=tk.DISABLED)
        
        # Zatvorenie
        tk.Button(calc_window, text="‚ùå Zavrie≈•", command=calc_window.destroy,
                 bg='#e74c3c', fg='white', font=('Arial', 12, 'bold')).pack(pady=10)
                 
    def format_optional_field(self, label, value, unit=""):
        """Form√°tuje voliteƒæn√© pole len ak je vyplnen√©"""
        if value and str(value).strip() not in ["", "0", "0.0", "Nezn√°ma"]:
            return f"\n‚Ä¢ {label}: {value}{unit}"
        return ""
    
    def format_section_if_has_data(self, title, fields_dict):
        """Form√°tuje sekciu len ak obsahuje dan√©"""
        section_content = ""
        for label, (value, unit) in fields_dict.items():
            section_content += self.format_optional_field(label, value, unit)
        
        if section_content:
            return f"\n\n=== {title} ===" + section_content
        return ""
    
    def generate_calculation_details(self):
        """Generovanie detailn√Ωch v√Ωpoƒçtov podƒæa STN EN ISO 13790"""
        if not self.results:
            return "Najprv vykonajte audit."
            
        basic = self.audit_data['basic_info']
        envelope = self.audit_data['envelope']
        heating = self.audit_data['heating']
        results = self.results
        
        # Konverzn√© faktory (lok√°lne pre detailn√© v√Ωpoƒçty)
        conversion_factors = {
            'electricity': 2.5  # Elektrina SR
        }
        
        # Emisn√© faktory (lok√°lne)
        emission_factors = {
            'electricity': 0.218  # kg CO2/kWh
        }
        
        details = f"""
        conversion_factors = {
            'electricity': 2.5  # Elektrina SR
        }
        
        # Emisn√© faktory (lok√°lne)
        emission_factors = {
            'electricity': 0.218  # kg CO2/kWh
        }
        
        details = f"""
{'='*80}
üß† DETAILN√â V√ùPOƒåTY podƒæa STN EN ISO 13790 a vyhl√°≈°ky 364/2012
{'='*80}

üìä VSTUPN√â √öDAJE:
‚Ä¢ Podlahov√° plocha: {basic['floor_area']:.1f} m¬≤
‚Ä¢ Objem budovy: {results['building_volume']:.1f} m¬≥
‚Ä¢ Tesnost n50: {results['n50_value']:.1f} h‚Åª¬π
‚Ä¢ Rok v√Ωstavby: {basic['construction_year']}
‚Ä¢ √öƒçinnos≈• vykurovacieho syst√©mu: {results['system_efficiency']:.0%}
‚Ä¢ Typ paliva: {results['fuel_type']}

{'='*60}
1Ô∏è‚É£ TRANSMISN√â TEPELN√â STRATY (QT)
{'='*60}

Obvodov√© steny:
  A = {envelope['wall_area']:.1f} m¬≤, U = {envelope['wall_u']:.3f} W/m¬≤K
  QT,wall = {envelope['wall_area']:.1f} √ó {envelope['wall_u']:.3f} = {results['wall_losses']:.2f} W/K

Okn√° a dvere:
  A = {envelope['window_area']:.1f} m¬≤, U = {envelope['window_u']:.3f} W/m¬≤K
  QT,win = {envelope['window_area']:.1f} √ó {envelope['window_u']:.3f} = {results['window_losses']:.2f} W/K

Strecha:
  A = {envelope['roof_area']:.1f} m¬≤, U = {envelope['roof_u']:.3f} W/m¬≤K
  QT,roof = {envelope['roof_area']:.1f} √ó {envelope['roof_u']:.3f} = {results['roof_losses']:.2f} W/K

Podlaha:
  QT,floor = {results['floor_losses']:.2f} W/K

Tepeln√© mosty:
  QT,tb = {results['thermal_bridge_losses']:.2f} W/K (line√°rne Œ®-mosty)

Celkov√© transmisn√© straty:
  QT = {results['transmission_losses']:.2f} W/K

{'='*60}
2Ô∏è‚É£ VENTILAƒåN√â STRATY (QV)
{'='*60}

Infiltraƒçn√Ω tok:
  Vn = n50/20 = {results['n50_value']:.1f}/20 = {results['n50_value']/20:.2f} h‚Åª¬π

Mechanick√© vetranie:
  Vmech = 0.5 h‚Åª¬π (minimum podƒæa normy)

Celkov√Ω ventilaƒçn√Ω tok:
  Vtot = {results['n50_value']/20:.2f} + 0.5 = {(results['n50_value']/20) + 0.5:.2f} h‚Åª¬π

Ventilaƒçn√© straty:
  QV = V √ó Vtot √ó œÅ √ó cp
  QV = {results['building_volume']:.0f} √ó {(results['n50_value']/20) + 0.5:.2f} √ó 1.2 √ó 1.0 = {results['ventilation_losses']:.2f} W/K

{'='*60}
3Ô∏è‚É£ MESAƒåN√Å ENERGETICK√Å BILANCIA
{'='*60}

Klimatick√° z√≥na: {results['climate_zone']}
Potrebna tepla na vykurovanie s uva≈æovan√≠m:
  ‚Ä¢ Sol√°rnych ziskov cez okn√°
  ‚Ä¢ Vn√∫torn√Ωch tepeln√Ωch ziskov
  ‚Ä¢ Vyu≈æitelnosti ziskov (koef. Œ∑)

Roƒçn√° potreba tepla: {results['heating_need']:.0f} kWh/rok

{'='*60}
4Ô∏è‚É£ ENERGETICK√â VSTUPY SYST√âMOV
{'='*60}

Vykurovanie:
  Qh,nd = {results['heating_need']:.0f} kWh/rok (potreba)
  Œ∑sys = {results['system_efficiency']:.0%} (√∫ƒçinnos≈• syst√©mu)
  Qh,in = {results['heating_need']:.0f} / {results['system_efficiency']:.2f} = {results['heating_energy']:.0f} kWh/rok

Tepla voda (TUV):
  Qw,in = {results['dhw_energy']:.0f} kWh/rok

Elektrick√© syst√©my:
  ‚Ä¢ Osvetlenie: {results['lighting_energy']:.0f} kWh/rok
  ‚Ä¢ Zariadenia: {results['appliances_energy']:.0f} kWh/rok
  Qe,total = {results['total_electricity']:.0f} kWh/rok

{'='*60}
5Ô∏è‚É£ PRIM√ÅRNA ENERGIA podƒæa vyhl√°≈°ky 364/2012
{'='*60}

Konverzn√© faktory:
  ‚Ä¢ Vykurovanie ({results['fuel_type']}): {results['heating_factor']:.1f}
  ‚Ä¢ Elektrina: {conversion_factors['electricity']:.1f}

V√Ωpoƒçet prim√°rnej energie:
  EPh = {results['heating_energy']:.0f} √ó {results['heating_factor']:.1f} = {results['heating_energy'] * results['heating_factor']:.0f} kWh/rok
  EPw = {results['dhw_energy']:.0f} √ó {results['heating_factor']:.1f} = {results['dhw_energy'] * results['heating_factor']:.0f} kWh/rok  
  EPe = {results['total_electricity']:.0f} √ó {conversion_factors['electricity']:.1f} = {results['total_electricity'] * conversion_factors['electricity']:.0f} kWh/rok
  
  EP,total = {results['primary_energy']:.0f} kWh/rok
  EP,spec = {results['primary_energy']:.0f} / {basic['floor_area']:.0f} = {results['specific_primary']:.1f} kWh/m¬≤rok

{'='*60}
6Ô∏è‚É£ ENERGETICK√Å TRIEDA A CO2 EMISIE
{'='*60}

Energetick√° trieda: {results['energy_class']}
(podƒæa vyhl√°≈°ky MH SR ƒç. 364/2012 Z. z.)

CO2 emisie:
  ‚Ä¢ Emisn√Ω faktor vykurovania: {results['heating_emission_factor']:.3f} kg CO2/kWh
  ‚Ä¢ Emisn√Ω faktor elektrina: {emission_factors['electricity']:.3f} kg CO2/kWh
  ‚Ä¢ Celkov√© emisie: {results['co2_emissions']:.0f} kg CO2/rok
  ‚Ä¢ ≈†pecifick√© emisie: {results['specific_co2']:.1f} kg CO2/m¬≤rok

{'='*60}
üìà EKONOMICK√â HODNOTENIE
{'='*60}

Roƒçn√© n√°klady: {results['annual_cost']:.0f} ‚Ç¨/rok
N√°klady na m¬≤: {results['annual_cost'] / basic['floor_area']:.2f} ‚Ç¨/m¬≤rok

{'='*80}
üìÑ POU≈ΩIT√â NORMY:
‚Ä¢ STN EN ISO 13790 (Energetick√° n√°roƒçnos≈• budov)
‚Ä¢ STN 73 0540-2 Z2/2019 (Tepeln√° ochrana budov)
‚Ä¢ Vyhl√°≈°ka MH SR ƒç. 364/2012 Z. z.
{'='*80}
        """
        
        return details
    
    def calculate_thermal_assessment(self):
        """V√Ωpoƒçet tepelno-technick√©ho pos√∫denia podƒæa STN 73 0540-2 Z2/2019"""
        try:
            # Pos√∫denie obvodov√©ho pl√°≈°≈•a
            wall_u = float(self.wall_u_actual.get()) if self.wall_u_actual.get() else 0
            wall_u_req = 0.22
            
            if wall_u > 0:
                if wall_u <= wall_u_req:
                    self.wall_assessment.config(text="‚úÖ VYHOVUJE", fg='green', bg='#d5f4e6')
                else:
                    self.wall_assessment.config(text="‚ùå NEVYHOVUJE", fg='red', bg='#f8d7da')
            
            # Pos√∫denie stre≈°n√©ho pl√°≈°≈•a
            roof_u = float(self.roof_u_actual.get()) if self.roof_u_actual.get() else 0
            roof_u_req = 0.15
            
            if roof_u > 0:
                if roof_u <= roof_u_req:
                    self.roof_assessment.config(text="‚úÖ VYHOVUJE", fg='green', bg='#d5f4e6')
                else:
                    self.roof_assessment.config(text="‚ùå NEVYHOVUJE", fg='red', bg='#f8d7da')
            
            # Pos√∫denie podlahy nad nevykurovan√Ωm
            floor_u = float(self.floor_u_actual.get()) if self.floor_u_actual.get() else 0
            floor_u_req = 0.85
            
            if floor_u > 0:
                if floor_u <= floor_u_req:
                    self.floor_assessment.config(text="‚úÖ VYHOVUJE", fg='green', bg='#d5f4e6')
                else:
                    self.floor_assessment.config(text="‚ùå NEVYHOVUJE", fg='red', bg='#f8d7da')
            
            # Pos√∫denie okien
            window_u = float(self.window_u_actual.get()) if self.window_u_actual.get() else 0
            window_u_max = 1.7
            
            if window_u > 0:
                if window_u <= window_u_max:
                    self.window_assessment.config(text="‚úÖ VYHOVUJE", fg='green', bg='#d5f4e6')
                else:
                    self.window_assessment.config(text="‚ùå NEVYHOVUJE", fg='red', bg='#f8d7da')
            
            # Aktualizovanie s√∫hrnn√Ωch tabuliek
            self.update_summary_tables()
            
            messagebox.showinfo("Tepelno-technick√© pos√∫denie", 
                              "Pos√∫denie U-hodn√¥t bolo dokonƒçen√©!\n\n"
                              "V√Ωsledky s√∫ zobrazen√© v jednotliv√Ωch sekci√°ch a s√∫hrnn√Ωch tabuƒæk√°ch.")
            
        except ValueError:
            messagebox.showerror("Chyba", "Pros√≠m zadajte platn√© ƒç√≠seln√© hodnoty pre U-hodnoty!")
        except Exception as e:
            messagebox.showerror("Chyba", f"Chyba pri v√Ωpoƒçte: {str(e)}")
    
    def update_summary_tables(self):
        """Aktualiz√°cia s√∫hrnn√Ωch tabuliek kon≈°trukci√≠"""
        try:
            # Aktualizovanie nepriehƒæadn√Ωch kon≈°trukci√≠
            constructions_data = {
                "Obvodov√© steny": (float(self.wall_u_actual.get()) if self.wall_u_actual.get() else 0, 0.22),
                "Strecha": (float(self.roof_u_actual.get()) if self.roof_u_actual.get() else 0, 0.15),
                "Podlaha nad nevykur.": (float(self.floor_u_actual.get()) if self.floor_u_actual.get() else 0, 0.85)
            }
            
            for name, (u_actual, u_req) in constructions_data.items():
                if name in self.construction_entries and u_actual > 0:
                    # V√Ωpoƒçet rezervy v percent√°ch
                    rezerva = ((u_req - u_actual) / u_req * 100) if u_req > 0 else 0
                    
                    # Aktualizovanie rezervy
                    self.construction_entries[name]['rezerva'].config(text=f"{rezerva:.1f}%")
                    
                    # Aktualizovanie pos√∫denia
                    if u_actual <= u_req:
                        self.construction_entries[name]['posudenie'].config(
                            text="‚úÖ VYHOVUJE", fg='green', bg='#d5f4e6')
                    else:
                        self.construction_entries[name]['posudenie'].config(
                            text="‚ùå NEVYHOVUJE", fg='red', bg='#f8d7da')
            
            # Aktualizovanie priehƒæadn√Ωch kon≈°trukci√≠ (okn√°)
            window_u_actual = float(self.window_u_actual.get()) if self.window_u_actual.get() else 0
            window_u_max = 1.7
            
            for orient in self.window_entries:
                if window_u_actual > 0:
                    # V√Ωpoƒçet rezervy
                    rezerva = ((window_u_max - window_u_actual) / window_u_max * 100) if window_u_max > 0 else 0
                    
                    # Aktualizovanie rezervy
                    self.window_entries[orient]['rezerva'].config(text=f"{rezerva:.1f}%")
                    
                    # Aktualizovanie pos√∫denia
                    if window_u_actual <= window_u_max:
                        self.window_entries[orient]['posudenie'].config(
                            text="‚úÖ VYHOVUJE", fg='green', bg='#d5f4e6')
                    else:
                        self.window_entries[orient]['posudenie'].config(
                            text="‚ùå NEVYHOVUJE", fg='red', bg='#f8d7da')
                        
        except Exception as e:
            print(f"Chyba pri aktualiz√°cii s√∫hrnn√Ωch tabuliek: {e}")
        
    def generate_certificate(self):
        """Generovanie certifik√°tu"""
        if not self.results:
            messagebox.showwarning("Upozornenie", "Najprv vykonajte audit!")
            return
            
        basic = self.audit_data['basic_info']
        results = self.results
        
        cert_window = tk.Toplevel(self.root)
        cert_window.title("üèÖ Energetick√Ω certifik√°t")
        cert_window.geometry("600x500")
        cert_window.configure(bg='white')
        
        # Header certifik√°tu
        header = tk.Frame(cert_window, bg='#2c3e50', height=60)
        header.pack(fill=tk.X)
        header.pack_propagate(False)
        
        tk.Label(header, text="üèÖ ENERGETICK√ù CERTIFIK√ÅT",
                font=('Arial', 18, 'bold'), fg='white', bg='#2c3e50').pack(pady=15)
        
        # Obsah certifik√°tu
        content_frame = tk.Frame(cert_window, bg='white')
        content_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=20)
        
        cert_text = f"""
ENERGETICK√ù CERTIFIK√ÅT BUDOVY
ƒå√≠slo: EC-{datetime.now().strftime('%Y%m%d%H%M')}

BUDOVA: {basic['building_name']}
Adresa: {basic['address']}
Podlahov√° plocha: {basic['floor_area']:.0f} m¬≤

ENERGETICK√â HODNOTENIE:
Energetick√° trieda: {results['energy_class']}
≈†pecifick√° prim√°rna energia: {results['specific_primary']:.1f} kWh/m¬≤rok
CO2 emisie: {results['specific_co2']:.1f} kg CO2/m¬≤rok

PLATNOS≈§:
D√°tum vydania: {datetime.now().strftime('%d.%m.%Y')}
Platnos≈• do: {datetime.now().replace(year=datetime.now().year + 10).strftime('%d.%m.%Y')}

Certifik√°t vystavil:
Professional Energy Audit System v2.0
Podƒæa STN EN 16247-1
        """
        
        cert_label = tk.Label(content_frame, text=cert_text, font=('Arial', 11),
                             justify=tk.LEFT, bg='white')
        cert_label.pack(pady=20)
        
        # Tlaƒçidl√°
        btn_frame = tk.Frame(cert_window, bg='white')
        btn_frame.pack(pady=20)
        
        tk.Button(btn_frame, text="üíæ Ulo≈æi≈• certifik√°t", command=lambda: self.save_certificate(cert_text),
                 bg='#3498db', fg='white', font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=10)
        
        tk.Button(btn_frame, text="‚ùå Zavrie≈•", command=cert_window.destroy,
                 bg='#e74c3c', fg='white', font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=10)
                 
    def save_certificate(self, cert_text):
        """Ulo≈æenie certifik√°tu"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text s√∫bory", "*.txt"), ("V≈°etky s√∫bory", "*.*")]
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(cert_text)
                messagebox.showinfo("√öspech", f"Certifik√°t ulo≈æen√Ω: {filename}")
            except Exception as e:
                messagebox.showerror("Chyba", f"Chyba pri ukladan√≠: {e}")
                
    def save_project(self):
        """Ulo≈æenie projektu"""
        if not self.audit_data:
            messagebox.showwarning("Upozornenie", "Nie je ƒço ulo≈æi≈•!")
            return
            
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON s√∫bory", "*.json"), ("V≈°etky s√∫bory", "*.*")]
        )
        
        if filename:
            try:
                project_data = {
                    'audit_data': self.audit_data,
                    'results': self.results,
                    'timestamp': datetime.now().isoformat(),
                    'version': '2.0'
                }
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(project_data, f, ensure_ascii=False, indent=2)
                    
                self.current_project_file = filename
                self.project_label.config(text=f"Projekt: {filename.split('/')[-1]}")
                messagebox.showinfo("√öspech", f"Projekt ulo≈æen√Ω: {filename}")
                
            except Exception as e:
                messagebox.showerror("Chyba", f"Chyba pri ukladan√≠: {e}")
                
    def load_project(self):
        """Naƒç√≠tanie projektu"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON s√∫bory", "*.json"), ("V≈°etky s√∫bory", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    project_data = json.load(f)
                    
                self.audit_data = project_data.get('audit_data', {})
                self.results = project_data.get('results', {})
                
                # Naƒç√≠tanie √∫dajov do formul√°rov
                self.load_data_to_forms()
                
                if self.results:
                    self.display_results()
                    self.notebook.select(6)  # Prepnutie na v√Ωsledky (index 6 kv√¥li TUV tabu)
                    
                self.current_project_file = filename
                self.project_label.config(text=f"Projekt: {filename.split('/')[-1]}")
                messagebox.showinfo("√öspech", f"Projekt naƒç√≠tan√Ω: {filename}")
                
            except Exception as e:
                messagebox.showerror("Chyba", f"Chyba pri naƒç√≠tavan√≠: {e}")
                
    def load_data_to_forms(self):
        """Naƒç√≠tanie √∫dajov do formul√°rov"""
        try:
            if 'basic_info' in self.audit_data:
                basic = self.audit_data['basic_info']
                self.building_name.delete(0, tk.END)
                self.building_name.insert(0, basic.get('building_name', ''))
                self.address.delete(0, tk.END)
                self.address.insert(0, basic.get('address', ''))
                # ... pokraƒçovanie pre v≈°etky polia
        except Exception as e:
            print(f"Chyba pri naƒç√≠tavan√≠ do formul√°rov: {e}")

def main():
    """Spustenie aplik√°cie"""
    root = tk.Tk()
    app = WorkingEnergyAudit(root)
    root.mainloop()

if __name__ == "__main__":
    main()