#!/usr/bin/env python3
"""
PROFESION√ÅLNA ENERGETICK√ù AUDIT APLIK√ÅCIA
User-friendly s pokroƒçil√Ωmi funkciami a profesion√°lnymi v√Ωstupmi
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
from datetime import datetime
import json
import os
import math

class ProfessionalEnergyAudit:
    def __init__(self, root):
        self.root = root
        self.root.title("üè¢ Profesion√°lny Energetick√Ω Audit | STN EN 16247")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f0f0f0')
        
        # D√°ta a valid√°cia
        self.audit_data = {}
        self.results = {}
        self.validation_errors = []
        
        # ≈†t√Ωlovanie
        self.setup_styles()
        self.create_professional_gui()
        
        # Auto-save ka≈æd√Ωch 5 min√∫t
        self.root.after(300000, self.auto_save)
        
    def setup_styles(self):
        """Nastavenie profesion√°lnych ≈°t√Ωlov"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Vlastn√© farby
        style.configure('Header.TFrame', background='#2c3e50')
        style.configure('Header.TLabel', background='#2c3e50', foreground='white', 
                       font=('Arial', 16, 'bold'))
        style.configure('Success.TButton', background='#27ae60')
        style.configure('Warning.TButton', background='#f39c12')
        style.configure('Danger.TButton', background='#e74c3c')
        
    def create_professional_gui(self):
        """Vytvorenie profesion√°lneho GUI"""
        
        # HLAVIƒåKA S LOGOM A INFORM√ÅCIAMI
        self.create_professional_header()
        
        # HLAVN√ù OBSAH S BOƒåN√ùM PANELOM
        self.create_main_content()
        
        # STAVOV√ù PANEL
        self.create_status_bar()
        
        # MENU
        self.create_menu()
        
    def create_professional_header(self):
        """Profesion√°lna hlaviƒçka"""
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)
        
        # ƒΩav√° strana - logo a n√°zov
        left_frame = tk.Frame(header_frame, bg='#2c3e50')
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=20, pady=10)
        
        title_label = tk.Label(left_frame, text="üè¢ PROFESION√ÅLNY ENERGETICK√ù AUDIT", 
                              font=('Arial', 18, 'bold'), fg='white', bg='#2c3e50')
        title_label.pack()
        
        subtitle_label = tk.Label(left_frame, text="Syst√©m pre energetick√© audity podƒæa STN EN 16247-1", 
                                 font=('Arial', 10), fg='#bdc3c7', bg='#2c3e50')
        subtitle_label.pack()
        
        # Prav√° strana - inform√°cie o projekte
        right_frame = tk.Frame(header_frame, bg='#2c3e50')
        right_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=20, pady=10)
        
        self.project_info = tk.Label(right_frame, text="Nov√Ω projekt", 
                                    font=('Arial', 12, 'bold'), fg='#ecf0f1', bg='#2c3e50')
        self.project_info.pack(anchor=tk.E)
        
        date_label = tk.Label(right_frame, text=f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}", 
                             font=('Arial', 10), fg='#bdc3c7', bg='#2c3e50')
        date_label.pack(anchor=tk.E)
        
    def create_main_content(self):
        """Hlavn√Ω obsah s boƒçn√Ωm panelom"""
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # ƒΩAV√ù BOƒåN√ù PANEL - NAVIG√ÅCIA
        self.create_navigation_panel(main_frame)
        
        # PRAV√ù PANEL - OBSAH
        self.content_frame = tk.Frame(main_frame, bg='white', relief=tk.RAISED, bd=1)
        self.content_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(5, 0))
        
        # ≈†tartovacia obrazovka
        self.show_welcome_screen()
        
    def create_navigation_panel(self, parent):
        """ƒΩav√Ω navigaƒçn√Ω panel"""
        nav_frame = tk.Frame(parent, bg='#34495e', width=280)
        nav_frame.pack(side=tk.LEFT, fill=tk.Y)
        nav_frame.pack_propagate(False)
        
        # Nadpis navig√°cie
        nav_title = tk.Label(nav_frame, text="üìã NAVIG√ÅCIA", 
                            font=('Arial', 12, 'bold'), fg='white', bg='#34495e')
        nav_title.pack(pady=(10, 20))
        
        # Navigaƒçn√© tlaƒçidl√°
        self.nav_buttons = {}
        nav_items = [
            ("üè†", "√övod", "welcome"),
            ("üè¢", "Z√°kladn√© √∫daje", "basic_info"),
            ("üß±", "Ob√°lka budovy", "envelope"),
            ("üî•", "Vykurovanie", "heating"),
            ("‚ùÑÔ∏è", "Chladenie/Vetranie", "cooling"),
            ("üí°", "Osvetlenie", "lighting"),
            ("üöø", "Tepl√° voda", "dhw"),
            ("üë•", "U≈æ√≠vanie", "usage"),
            ("üîç", "Valid√°cia", "validation"),
            ("üìä", "V√Ωsledky", "results"),
            ("üèÖ", "Certifik√°t", "certificate")
        ]
        
        for icon, label, key in nav_items:
            btn = tk.Button(nav_frame, text=f"{icon} {label}", 
                           command=lambda k=key: self.navigate_to(k),
                           bg='#34495e', fg='white', relief=tk.FLAT,
                           font=('Arial', 11), width=30, height=2,
                           anchor=tk.W, padx=20)
            btn.pack(fill=tk.X, pady=2, padx=10)
            self.nav_buttons[key] = btn
            
            # Hover efekt
            btn.bind("<Enter>", lambda e, b=btn: b.config(bg='#4a6741'))
            btn.bind("<Leave>", lambda e, b=btn: b.config(bg='#34495e'))
        
        # SPODN√ù PANEL NAVIG√ÅCIE - AKƒåN√â TLAƒåIDL√Å
        actions_frame = tk.Frame(nav_frame, bg='#34495e')
        actions_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=20)
        
        # HLAVN√â TLAƒåIDLO
        self.main_action_btn = tk.Button(actions_frame, 
                                        text="üî¨ VYKONA≈§ AUDIT",
                                        command=self.perform_professional_audit,
                                        bg='#27ae60', fg='white',
                                        font=('Arial', 14, 'bold'),
                                        height=3, relief=tk.RAISED, bd=3)
        self.main_action_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # OSTATN√â AKCIE
        action_buttons = [
            ("üíæ Ulo≈æi≈•", self.save_project, '#3498db'),
            ("üìÇ Naƒç√≠ta≈•", self.load_project, '#9b59b6'),
            ("üìÑ Export PDF", self.export_pdf, '#e67e22'),
        ]
        
        for text, command, color in action_buttons:
            btn = tk.Button(actions_frame, text=text, command=command,
                           bg=color, fg='white', font=('Arial', 10, 'bold'),
                           height=2)
            btn.pack(fill=tk.X, padx=10, pady=2)
            
    def create_menu(self):
        """Hlavn√© menu"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # S√∫bor menu
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="S√∫bor", menu=file_menu)
        file_menu.add_command(label="Nov√Ω projekt", command=self.new_project)
        file_menu.add_command(label="Otvori≈•...", command=self.load_project)
        file_menu.add_command(label="Ulo≈æi≈•", command=self.save_project)
        file_menu.add_command(label="Ulo≈æi≈• ako...", command=self.save_as_project)
        file_menu.add_separator()
        file_menu.add_command(label="Export PDF", command=self.export_pdf)
        file_menu.add_separator()
        file_menu.add_command(label="Ukonƒçi≈•", command=self.root.quit)
        
        # N√°stroje menu
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="N√°stroje", menu=tools_menu)
        tools_menu.add_command(label="Kalkulaƒçka U-hodn√¥t", command=self.u_value_calculator)
        tools_menu.add_command(label="HDD kalkulaƒçka", command=self.hdd_calculator)
        tools_menu.add_command(label="Valid√°cia √∫dajov", command=self.validate_data)
        
        # Pomoc menu
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="Pomoc", menu=help_menu)
        help_menu.add_command(label="Pou≈æ√≠vateƒæsk√° pr√≠ruƒçka", command=self.show_help)
        help_menu.add_command(label="STN EN 16247", command=self.show_standards)
        help_menu.add_command(label="O aplik√°cii", command=self.show_about)
        
    def create_status_bar(self):
        """Stavov√Ω panel"""
        status_frame = tk.Frame(self.root, bg='#ecf0f1', height=30)
        status_frame.pack(side=tk.BOTTOM, fill=tk.X)
        status_frame.pack_propagate(False)
        
        # Progress bar
        self.progress = ttk.Progressbar(status_frame, mode='determinate')
        self.progress.pack(side=tk.LEFT, padx=10, pady=5, fill=tk.X, expand=True)
        
        # Status text
        self.status_text = tk.Label(status_frame, text="Pripraven√Ω na pr√°cu", 
                                   bg='#ecf0f1', font=('Arial', 9))
        self.status_text.pack(side=tk.RIGHT, padx=10, pady=5)
        
    def navigate_to(self, section):
        """Navig√°cia medzi sekciami"""
        self.clear_content()
        self.update_navigation_style(section)
        
        if section == "welcome":
            self.show_welcome_screen()
        elif section == "basic_info":
            self.show_basic_info_form()
        elif section == "envelope":
            self.show_envelope_form()
        elif section == "heating":
            self.show_heating_form()
        elif section == "cooling":
            self.show_cooling_form()
        elif section == "lighting":
            self.show_lighting_form()
        elif section == "dhw":
            self.show_dhw_form()
        elif section == "usage":
            self.show_usage_form()
        elif section == "validation":
            self.show_validation()
        elif section == "results":
            self.show_results()
        elif section == "certificate":
            self.show_certificate()
            
    def update_navigation_style(self, active_section):
        """Aktualiz√°cia ≈°t√Ωlu navig√°cie"""
        for key, btn in self.nav_buttons.items():
            if key == active_section:
                btn.config(bg='#2c3e50', relief=tk.SUNKEN)
            else:
                btn.config(bg='#34495e', relief=tk.FLAT)
                
    def clear_content(self):
        """Vyƒçistenie obsahu"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
    def show_welcome_screen(self):
        """√övodn√° obrazovka"""
        welcome_frame = tk.Frame(self.content_frame, bg='white')
        welcome_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=30)
        
        # Hlavn√Ω nadpis
        title = tk.Label(welcome_frame, text="Vitajte v Profesion√°lnom Energetickom Audite", 
                        font=('Arial', 24, 'bold'), bg='white', fg='#2c3e50')
        title.pack(pady=(0, 20))
        
        # Popis
        desc_text = """
T√°to aplik√°cia v√°m umo≈æn√≠ vykona≈• komplexn√Ω energetick√Ω audit budovy v s√∫lade s:
‚Ä¢ STN EN 16247-1 (Energetick√© audity - V≈°eobecn√© po≈æiadavky)
‚Ä¢ STN EN ISO 13790 (Energetick√° n√°roƒçnos≈• budov)
‚Ä¢ Vyhl√°≈°ka MH SR ƒç. 364/2012 Z. z.

üéØ KƒΩ√öƒåOV√â FUNKCIE:
‚úÖ User-friendly rozhranie s intuit√≠vnou navig√°ciou
‚úÖ Integrovan√° valid√°cia √∫dajov v re√°lnom ƒçase
‚úÖ Pokroƒçil√© v√Ωpoƒçty podƒæa platn√Ωch noriem
‚úÖ Profesion√°lne reporty a certifik√°ty
‚úÖ Automatick√© ukladanie a export do PDF
‚úÖ Kalkulaƒçky a pomocn√© n√°stroje
        """
        
        desc_label = tk.Label(welcome_frame, text=desc_text, font=('Arial', 12), 
                             bg='white', fg='#34495e', justify=tk.LEFT)
        desc_label.pack(pady=20)
        
        # R√Ωchle akcie
        quick_frame = tk.LabelFrame(welcome_frame, text="üöÄ R√Ωchle akcie", 
                                   font=('Arial', 14, 'bold'), bg='white')
        quick_frame.pack(fill=tk.X, pady=20)
        
        buttons_frame = tk.Frame(quick_frame, bg='white')
        buttons_frame.pack(pady=20)
        
        quick_actions = [
            ("üÜï Nov√Ω projekt", self.new_project, '#27ae60'),
            ("üìÇ Otvori≈• existuj√∫ci", self.load_project, '#3498db'),
            ("üìö Pr√≠ruƒçka", self.show_help, '#9b59b6'),
            ("üßÆ Kalkulaƒçky", self.u_value_calculator, '#f39c12')
        ]
        
        for i, (text, command, color) in enumerate(quick_actions):
            btn = tk.Button(buttons_frame, text=text, command=command,
                           bg=color, fg='white', font=('Arial', 12, 'bold'),
                           width=20, height=2)
            btn.grid(row=i//2, column=i%2, padx=10, pady=5)
            
        # Info panel
        info_frame = tk.Frame(welcome_frame, bg='#ecf0f1', relief=tk.RAISED, bd=1)
        info_frame.pack(fill=tk.X, pady=(20, 0))
        
        info_text = "üí° TIP: Zaƒçnite zad√°van√≠m z√°kladn√Ωch √∫dajov o budove v sekcii 'Z√°kladn√© √∫daje'"
        info_label = tk.Label(info_frame, text=info_text, font=('Arial', 11), 
                             bg='#ecf0f1', fg='#2c3e50')
        info_label.pack(pady=10)
        
    def show_basic_info_form(self):
        """Formul√°r pre z√°kladn√© inform√°cie"""
        form_frame = tk.Frame(self.content_frame, bg='white')
        form_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Nadpis
        title = tk.Label(form_frame, text="üè¢ Z√ÅKLADN√â √öDAJE O BUDOVE", 
                        font=('Arial', 18, 'bold'), bg='white', fg='#2c3e50')
        title.pack(pady=(0, 20))
        
        # Scrollable area
        canvas = tk.Canvas(form_frame, bg='white')
        scrollbar = ttk.Scrollbar(form_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='white')
        
        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # IDENTIFIKAƒåN√â √öDAJE
        self.create_form_section(scrollable_frame, "üè¢ Identifik√°cia budovy", [
            ("N√°zov budovy *", "building_name", "text", True),
            ("Adresa *", "address", "text", True),
            ("Katastr√°lne √∫zemie", "cadastral", "text", False),
            ("Vlastn√≠k/Spr√°vca *", "owner", "text", True),
            ("IƒåO", "ico", "text", False),
            ("Kontaktn√° osoba", "contact_person", "text", False),
            ("Telef√≥n", "phone", "text", False),
            ("Email", "email", "email", False)
        ])
        
        # TECHNICK√â PARAMETRE
        self.create_form_section(scrollable_frame, "üìê Technick√© parametre", [
            ("Rok v√Ωstavby *", "construction_year", "number", True),
            ("Rok rekon≈°trukcie", "renovation_year", "number"),
            ("Poƒçet podla≈æ√≠ *", "floors_count", "number", True),
            ("V√Ω≈°ka budovy [m] *", "building_height", "decimal", True),
            ("Podlahov√° plocha [m¬≤] *", "floor_area", "decimal", True),
            ("Obostavan√Ω priestor [m¬≥] *", "volume", "decimal", True),
            ("Typ budovy *", "building_type", "combo", True, 
             ["Rodinn√Ω dom", "Bytov√Ω dom", "Administrat√≠vna budova", "≈†kola", 
              "Nemocnica", "Hotel", "Obchod", "Priemyseln√° budova", "Ostatn√©"]),
            ("Kon≈°trukƒçn√Ω syst√©m *", "construction_system", "combo", True,
             ["Murovan√Ω", "Montovan√Ω bet√≥n", "Skelet", "Drevostavba", "Ostatn√©"])
        ])
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Valid√°cia v re√°lnom ƒçase
        self.setup_realtime_validation()
        
    def create_form_section(self, parent, title, fields):
        """Vytvorenie sekcie formul√°ra"""
        section_frame = tk.LabelFrame(parent, text=title, font=('Arial', 12, 'bold'), 
                                     bg='white', fg='#2c3e50')
        section_frame.pack(fill=tk.X, padx=10, pady=10)
        
        for i, field_info in enumerate(fields):
            self.create_form_field(section_frame, field_info, i)
            
    def create_form_field(self, parent, field_info, row):
        """Vytvorenie poƒæa formul√°ra"""
        label_text, field_name, field_type, required = field_info[:4]
        
        # Label s oznaƒçen√≠m povinnosti
        label_frame = tk.Frame(parent, bg='white')
        label_frame.grid(row=row, column=0, sticky=tk.W, padx=10, pady=5)
        
        label = tk.Label(label_frame, text=label_text, bg='white', font=('Arial', 10))
        label.pack(side=tk.LEFT)
        
        if required:
            req_label = tk.Label(label_frame, text="*", bg='white', fg='red', 
                                font=('Arial', 12, 'bold'))
            req_label.pack(side=tk.LEFT)
        
        # Input field
        if field_type == "combo":
            values = field_info[5] if len(field_info) > 5 else []
            widget = ttk.Combobox(parent, values=values, width=30)
        elif field_type == "text":
            widget = tk.Entry(parent, width=32, font=('Arial', 10))
        elif field_type == "email":
            widget = tk.Entry(parent, width=32, font=('Arial', 10))
        elif field_type == "number":
            widget = tk.Entry(parent, width=32, font=('Arial', 10))
        elif field_type == "decimal":
            widget = tk.Entry(parent, width=32, font=('Arial', 10))
        else:
            widget = tk.Entry(parent, width=32, font=('Arial', 10))
            
        widget.grid(row=row, column=1, padx=10, pady=5, sticky=tk.W)
        
        # Ulo≈æenie referencie
        setattr(self, field_name, widget)
        
        # Valid√°cia
        if required:
            widget.bind('<KeyRelease>', lambda e, fn=field_name: self.validate_field(fn))
            
        # Help tooltip
        if field_name in self.get_field_help():
            self.create_tooltip(widget, self.get_field_help()[field_name])
            
    def get_field_help(self):
        """Pomocn√© texty pre polia"""
        return {
            "floor_area": "Podlahov√° plocha v≈°etk√Ωch vykurovan√Ωch priestorov",
            "volume": "Obostavan√Ω priestor = podlahov√° plocha √ó v√Ω≈°ka",
            "construction_year": "Rok dokonƒçenia v√Ωstavby budovy",
            "building_height": "Priemern√° v√Ω≈°ka budovy od z√°kladov po strechu"
        }
        
    def create_tooltip(self, widget, text):
        """Vytvorenie tooltip-u"""
        def show_tooltip(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            label = tk.Label(tooltip, text=text, bg='#ffffcc', fg='black', 
                           font=('Arial', 9), relief=tk.SOLID, bd=1)
            label.pack()
            widget.tooltip = tooltip
            
        def hide_tooltip(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
                
        widget.bind('<Enter>', show_tooltip)
        widget.bind('<Leave>', hide_tooltip)
        
    def validate_field(self, field_name):
        """Valid√°cia jednotliv√©ho poƒæa"""
        widget = getattr(self, field_name)
        value = widget.get().strip()
        
        # Reset ≈°t√Ωlu
        widget.config(bg='white')
        
        # Valid√°cia podƒæa typu
        valid = True
        if field_name in ['construction_year', 'floors_count']:
            try:
                int_val = int(value) if value else 0
                if field_name == 'construction_year' and (int_val < 1800 or int_val > 2030):
                    valid = False
                elif field_name == 'floors_count' and (int_val < 1 or int_val > 100):
                    valid = False
            except ValueError:
                valid = False
                
        elif field_name in ['floor_area', 'volume', 'building_height']:
            try:
                float_val = float(value) if value else 0
                if float_val <= 0:
                    valid = False
            except ValueError:
                valid = False
                
        # Zv√Ωraznenie ch√Ωb
        if not valid and value:
            widget.config(bg='#ffcccc')
        elif value:
            widget.config(bg='#ccffcc')
            
    def setup_realtime_validation(self):
        """Nastavenie valid√°cie v re√°lnom ƒçase"""
        # Implementovan√© v create_form_field
        pass
        
    def show_envelope_form(self):
        """Formul√°r pre ob√°lku budovy"""
        # Podobne ako basic_info_form, ale pre ob√°lku budovy
        messagebox.showinfo("Info", "Formul√°r pre ob√°lku budovy bude implementovan√Ω...")
        
    def show_heating_form(self):
        """Formul√°r pre vykurovanie"""
        messagebox.showinfo("Info", "Formul√°r pre vykurovanie bude implementovan√Ω...")
        
    def show_cooling_form(self):
        """Formul√°r pre chladenie"""
        messagebox.showinfo("Info", "Formul√°r pre chladenie bude implementovan√Ω...")
        
    def show_lighting_form(self):
        """Formul√°r pre osvetlenie"""
        messagebox.showinfo("Info", "Formul√°r pre osvetlenie bude implementovan√Ω...")
        
    def show_dhw_form(self):
        """Formul√°r pre tepl√∫ vodu"""
        messagebox.showinfo("Info", "Formul√°r pre tepl√∫ vodu bude implementovan√Ω...")
        
    def show_usage_form(self):
        """Formul√°r pre u≈æ√≠vanie"""
        messagebox.showinfo("Info", "Formul√°r pre u≈æ√≠vanie bude implementovan√Ω...")
        
    def show_validation(self):
        """Zobrazenie valid√°cie"""
        messagebox.showinfo("Info", "Valid√°cia √∫dajov bude implementovan√°...")
        
    def show_results(self):
        """Zobrazenie v√Ωsledkov"""
        messagebox.showinfo("Info", "V√Ωsledky bud√∫ implementovan√©...")
        
    def show_certificate(self):
        """Zobrazenie certifik√°tu"""
        messagebox.showinfo("Info", "Certifik√°t bude implementovan√Ω...")
        
    def perform_professional_audit(self):
        """Vykonanie profesion√°lneho auditu"""
        # Najprv valid√°cia
        if not self.validate_all_data():
            messagebox.showerror("Chyba", "Najprv opravte v≈°etky chyby vo formul√°ri!")
            return
            
        self.status_text.config(text="Prebieha audit...")
        self.progress['value'] = 0
        
        try:
            # Simul√°cia postupn√©ho auditu
            for i in range(0, 101, 10):
                self.progress['value'] = i
                self.root.update()
                self.root.after(100)  # 100ms delay
                
            self.status_text.config(text="Audit dokonƒçen√Ω √∫spe≈°ne!")
            messagebox.showinfo("√öspech", "‚úÖ Profesion√°lny energetick√Ω audit dokonƒçen√Ω!")
            
        except Exception as e:
            messagebox.showerror("Chyba", f"Chyba pri audite: {e}")
        finally:
            self.progress['value'] = 0
            
    def validate_all_data(self):
        """Valid√°cia v≈°etk√Ωch √∫dajov"""
        # Implement√°cia komplexnej valid√°cie
        return True  # Doƒçasne
        
    def new_project(self):
        """Nov√Ω projekt"""
        if messagebox.askyesno("Nov√Ω projekt", "Chcete vytvori≈• nov√Ω projekt? Neulo≈æen√© zmeny sa stratia."):
            self.audit_data = {}
            self.results = {}
            self.project_info.config(text="Nov√Ω projekt")
            self.navigate_to("welcome")
            
    def save_project(self):
        """Ulo≈æenie projektu"""
        messagebox.showinfo("Info", "Ukladanie projektu bude implementovan√©...")
        
    def save_as_project(self):
        """Ulo≈æenie projektu ako"""
        messagebox.showinfo("Info", "Ukladanie ako bude implementovan√©...")
        
    def load_project(self):
        """Naƒç√≠tanie projektu"""
        messagebox.showinfo("Info", "Naƒç√≠tanie projektu bude implementovan√©...")
        
    def export_pdf(self):
        """Export do PDF"""
        messagebox.showinfo("Info", "Export do PDF bude implementovan√Ω...")
        
    def u_value_calculator(self):
        """Kalkulaƒçka U-hodn√¥t"""
        calc_window = tk.Toplevel(self.root)
        calc_window.title("üßÆ Kalkulaƒçka U-hodn√¥t")
        calc_window.geometry("500x400")
        calc_window.configure(bg='white')
        
        tk.Label(calc_window, text="Kalkulaƒçka U-hodn√¥t bude implementovan√°",
                font=('Arial', 14), bg='white').pack(pady=50)
                
    def hdd_calculator(self):
        """HDD kalkulaƒçka"""
        messagebox.showinfo("Info", "HDD kalkulaƒçka bude implementovan√°...")
        
    def validate_data(self):
        """Valid√°cia √∫dajov"""
        messagebox.showinfo("Info", "Valid√°cia √∫dajov bude implementovan√°...")
        
    def show_help(self):
        """Zobrazenie pomoci"""
        help_window = tk.Toplevel(self.root)
        help_window.title("üìö Pou≈æ√≠vateƒæsk√° pr√≠ruƒçka")
        help_window.geometry("800x600")
        help_window.configure(bg='white')
        
        help_text = scrolledtext.ScrolledText(help_window, font=('Arial', 10), wrap=tk.WORD)
        help_text.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        help_content = """
POU≈Ω√çVATEƒΩSK√Å PR√çRUƒåKA - PROFESION√ÅLNY ENERGETICK√ù AUDIT

1. √öVOD
T√°to aplik√°cia sl√∫≈æi na vykonanie energetick√©ho auditu budovy podƒæa STN EN 16247-1.

2. POSTUP PR√ÅCE
2.1 Vytvorte nov√Ω projekt alebo naƒç√≠tajte existuj√∫ci
2.2 Postupne vypl≈àte v≈°etky sekcie v ƒæavom menu
2.3 Skontrolujte valid√°ciu √∫dajov
2.4 Spustite audit
2.5 Pre≈°tudujte v√Ωsledky a vygenerujte certifik√°t

3. SEKCIE FORMUL√ÅRA
üè¢ Z√°kladn√© √∫daje - identifik√°cia a technick√© parametre budovy
üß± Ob√°lka budovy - steny, okn√°, strecha, podlaha
üî• Vykurovanie - zdroj tepla a distrib√∫cia
‚ùÑÔ∏è Chladenie/Vetranie - klimatiz√°cia a vetranie
üí° Osvetlenie - typy svietidiel a zariaden√≠
üöø Tepl√° voda - syst√©m ohrevu teplej vody
üë• U≈æ√≠vanie - obsadenos≈• a prev√°dzka

4. KALKULAƒåKY
üßÆ U-hodnoty - v√Ωpoƒçet s√∫ƒçiniteƒæa prechodu tepla
üìä HDD - v√Ωpoƒçet stup≈àov√Ωch dn√≠

5. EXPORT A UKLADANIE
üíæ Automatick√© ukladanie ka≈æd√Ωch 5 min√∫t
üìÑ Export do PDF pre profesion√°lne reporty
        """
        
        help_text.insert(tk.END, help_content)
        help_text.config(state=tk.DISABLED)
        
    def show_standards(self):
        """Zobrazenie noriem"""
        messagebox.showinfo("Normy", """
STN EN 16247-1:2012 - Energetick√© audity. ƒåas≈• 1: V≈°eobecn√© po≈æiadavky

T√°to norma definuje po≈æiadavky, spoloƒçn√© metodiky a dod√°vky energetick√Ωch auditov.

Kƒæ√∫ƒçov√© po≈æiadavky:
‚Ä¢ Systematick√Ω pr√≠stup k auditu
‚Ä¢ Kvalifikovan√≠ aud√≠tori
‚Ä¢ Transparentn√© metodiky v√Ωpoƒçtu
‚Ä¢ Jasn√© odpor√∫ƒçania
‚Ä¢ Profesion√°lne reporty
        """)
        
    def show_about(self):
        """O aplik√°cii"""
        messagebox.showinfo("O aplik√°cii", """
üè¢ PROFESION√ÅLNY ENERGETICK√ù AUDIT v2.0

Vyvinut√© pre potreby energetick√Ωch aud√≠torov v s√∫lade s:
‚Ä¢ STN EN 16247-1
‚Ä¢ STN EN ISO 13790
‚Ä¢ Vyhl√°≈°ka MH SR ƒç. 364/2012 Z. z.

Autor: Energy Audit System
Verzia: 2.0.0
D√°tum: 2024

¬© V≈°etky pr√°va vyhraden√©
        """)
        
    def auto_save(self):
        """Automatick√© ukladanie"""
        if self.audit_data:
            try:
                # Auto-save logika
                pass
            except:
                pass
        # Napl√°novanie ƒèal≈°ieho auto-save
        self.root.after(300000, self.auto_save)

def main():
    """Spustenie aplik√°cie"""
    root = tk.Tk()
    app = ProfessionalEnergyAudit(root)
    root.mainloop()

if __name__ == "__main__":
    main()