#!/usr/bin/env python3
"""
INTERAKT√çVNY ENERGETICK√ù AUDIT SYST√âM
Profesion√°lny energetick√Ω audit s mo≈ænos≈•ou zad√°vania re√°lnych projektov√Ωch d√°t
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from datetime import datetime
import json
from typing import Dict, List, Any, Optional

# Import na≈°ich modulov
try:
    from src.energy_calculations import get_energy_calculator
    from src.thermal_analysis import Construction, MaterialLayer, ConstructionType
    from src.certificate_generator import get_certificate_generator
except ImportError as e:
    print(f"Import warning: {e}")
    # Fallback - vytvor√≠me vlastn√© implement√°cie
    def get_energy_calculator():
        return None
    def get_certificate_generator():
        return None

class InteractiveEnergyAudit:
    """Interakt√≠vny syst√©m pre energetick√Ω audit"""
    
    def __init__(self):
        self.audit_data = {}
        self.results = {}
        # Zjednodu≈°en√© inicializ√°cie
        try:
            self.certificate_generator = get_certificate_generator()
        except:
            self.certificate_generator = None
        
    def welcome_screen(self):
        """Uv√≠tacia obrazovka"""
        print("="*80)
        print("üè¢ PROFESION√ÅLNY ENERGETICK√ù AUDIT SYST√âM")
        print("üìã Podƒæa STN EN 16247 a slovensk√Ωch noriem")
        print("="*80)
        print()
        print("Tento syst√©m v√°m umo≈æn√≠:")
        print("‚úÖ Zada≈• re√°lne projektov√© d√°ta")
        print("‚úÖ Vypoƒç√≠ta≈• energetick√© vlastnosti podƒæa noriem") 
        print("‚úÖ Vytvori≈• profesion√°lny audit report")
        print("‚úÖ Vygenerova≈• energetick√Ω certifik√°t")
        print()
        
    def collect_basic_building_data(self) -> Dict[str, Any]:
        """Zber z√°kladn√Ωch √∫dajov o budove"""
        print("üìã 1. Z√ÅKLADN√â √öDAJE O BUDOVE")
        print("-" * 40)
        
        building_data = {}
        
        # Z√°kladn√© inform√°cie
        building_data['name'] = input("N√°zov budovy: ").strip()
        building_data['address'] = input("Adresa: ").strip()
        
        # Typ budovy
        print("\nTypy budov:")
        print("1. Rodinn√Ω dom")
        print("2. Bytov√Ω dom") 
        print("3. Administrat√≠vna budova")
        print("4. Priemyseln√° budova")
        print("5. ≈†kola")
        print("6. Nemocnica")
        print("7. Hotel")
        print("8. Obchodn√© centrum")
        
        building_type_choice = input("Vyberte typ budovy (1-8): ").strip()
        building_types = {
            '1': 'Rodinn√Ω dom',
            '2': 'Bytov√Ω dom',
            '3': 'Administrat√≠vna budova', 
            '4': 'Priemyseln√° budova',
            '5': '≈†kola',
            '6': 'Nemocnica',
            '7': 'Hotel',
            '8': 'Obchodn√© centrum'
        }
        building_data['type'] = building_types.get(building_type_choice, 'Rodinn√Ω dom')
        
        # Geometrick√© parametre
        print("\nüìê GEOMETRICK√â PARAMETRE:")
        try:
            building_data['floor_area'] = float(input("Podlahov√° plocha [m¬≤]: ").strip())
            building_data['heated_area'] = float(input("Vykurovan√° plocha [m¬≤]: ").strip())
            building_data['volume'] = float(input("Objem budovy [m¬≥]: ").strip())
            building_data['height'] = float(input("V√Ω≈°ka budovy [m]: ").strip())
            building_data['floors'] = int(input("Poƒçet podla≈æ√≠: ").strip())
        except ValueError:
            print("‚ùå Neplatn√© ƒç√≠slo, pou≈æ√≠vam predvolen√© hodnoty")
            building_data['floor_area'] = 120.0
            building_data['heated_area'] = 115.0
            building_data['volume'] = 350.0
            building_data['height'] = 8.5
            building_data['floors'] = 2
        
        # Rok v√Ωstavby
        try:
            building_data['construction_year'] = int(input("Rok v√Ωstavby: ").strip())
        except ValueError:
            building_data['construction_year'] = 2000
            
        return building_data
    
    def collect_envelope_data(self) -> Dict[str, Any]:
        """Zber √∫dajov o ob√°lke budovy"""
        print("\nüè† 2. OB√ÅLKA BUDOVY")
        print("-" * 40)
        
        envelope_data = {'constructions': []}
        
        # Steny
        print("\nüß± OBVODOV√â STENY:")
        wall_area = float(input("Celkov√° plocha obvodov√Ωch stien [m¬≤]: ").strip() or "150")
        
        print("Vyberte typ obvodovej steny:")
        print("1. Muriva s kontaktnou izol√°ciou")
        print("2. Sendviƒçov√° murovan√°")
        print("3. ≈Ωelezobet√≥nov√° s izol√°ciou")
        print("4. Dreven√° kon≈°trukcia")
        print("5. Vlastn√° kon≈°trukcia")
        
        wall_choice = input("V√Ωber (1-5): ").strip()
        
        if wall_choice == "5":
            print("Zadajte vrstvy kon≈°trukcie (zvn√∫tra smerom von):")
            layers = []
            layer_count = int(input("Poƒçet vrstiev: ").strip() or "4")
            
            for i in range(layer_count):
                print(f"\nVrstva {i+1}:")
                material = input("  Materi√°l: ").strip()
                thickness = float(input("  Hr√∫bka [m]: ").strip())
                lambda_val = float(input("  Lambda [W/mK]: ").strip())
                density = float(input("  Hustota [kg/m¬≥]: ").strip() or "1800")
                heat_capacity = float(input("  Mern√° tepeln√° kapacita [J/kgK]: ").strip() or "1000")
                
                layers.append(MaterialLayer(material, thickness, lambda_val, density, heat_capacity))
            
            wall_construction = Construction("Obvodov√° stena", ConstructionType.EXTERNAL_WALL, layers, wall_area)
            u_value = wall_construction.u_value
            
        else:
            # Predvolen√© kon≈°trukcie
            typical_u_values = {
                '1': 0.25,  # Kontaktn√° izol√°cia
                '2': 0.30,  # Sendviƒç
                '3': 0.22,  # ≈ΩB s izol√°ciou
                '4': 0.20   # Dreven√°
            }
            u_value = typical_u_values.get(wall_choice, 0.25)
            print(f"Pou≈æit√° U-hodnota: {u_value} W/m¬≤K")
        
        envelope_data['constructions'].append({
            'name': 'Obvodov√° stena',
            'type': 'wall',
            'area': wall_area,
            'u_value': u_value
        })
        
        # Strecha
        print("\nüè† STRECHA:")
        roof_area = float(input("Plocha strechy [m¬≤]: ").strip() or "80")
        roof_u = float(input("U-hodnota strechy [W/m¬≤K] (Enter=0.20): ").strip() or "0.20")
        
        envelope_data['constructions'].append({
            'name': 'Strecha',
            'type': 'roof', 
            'area': roof_area,
            'u_value': roof_u
        })
        
        # Podlaha
        print("\nüî≤ PODLAHA:")
        floor_area = float(input("Plocha podlahy [m¬≤]: ").strip() or "80")
        floor_u = float(input("U-hodnota podlahy [W/m¬≤K] (Enter=0.30): ").strip() or "0.30")
        
        envelope_data['constructions'].append({
            'name': 'Podlaha',
            'type': 'floor',
            'area': floor_area, 
            'u_value': floor_u
        })
        
        # Okn√°
        print("\nü™ü OKN√Å:")
        window_area = float(input("Celkov√° plocha okien [m¬≤]: ").strip() or "25")
        
        print("Typ okien:")
        print("1. Jednosklo (U=5.0)")
        print("2. Dvojsklo (U=2.8)")
        print("3. Trojsklo (U=1.1)")
        print("4. Pas√≠vne okn√° (U=0.8)")
        print("5. Vlastn√° hodnota")
        
        window_choice = input("V√Ωber (1-5): ").strip()
        window_u_values = {'1': 5.0, '2': 2.8, '3': 1.1, '4': 0.8}
        
        if window_choice == '5':
            window_u = float(input("U-hodnota okien [W/m¬≤K]: ").strip())
        else:
            window_u = window_u_values.get(window_choice, 2.8)
            
        print(f"Pou≈æit√° U-hodnota okien: {window_u} W/m¬≤K")
        
        envelope_data['constructions'].append({
            'name': 'Okn√°',
            'type': 'window',
            'area': window_area,
            'u_value': window_u
        })
        
        return envelope_data
    
    def collect_systems_data(self) -> Dict[str, Any]:
        """Zber √∫dajov o technick√Ωch syst√©moch"""
        print("\n‚öôÔ∏è 3. TECHNICK√â SYST√âMY")
        print("-" * 40)
        
        systems_data = {}
        
        # Vykurovanie
        print("\nüî• VYKUROVAC√ç SYST√âM:")
        print("1. Plynov√Ω kotol")
        print("2. Elektrick√© vykurovanie")
        print("3. Tepeln√© ƒçerpadlo")
        print("4. Biomasa")
        print("5. Diaƒækov√© vykurovanie")
        
        heating_choice = input("Typ vykurovania (1-5): ").strip()
        heating_types = {
            '1': {'name': 'Plynov√Ω kotol', 'efficiency': 0.90, 'fuel': 'natural_gas'},
            '2': {'name': 'Elektrick√© vykurovanie', 'efficiency': 1.0, 'fuel': 'electricity'},
            '3': {'name': 'Tepeln√© ƒçerpadlo', 'efficiency': 3.5, 'fuel': 'electricity'}, 
            '4': {'name': 'Biomasa', 'efficiency': 0.80, 'fuel': 'biomass'},
            '5': {'name': 'Diaƒækov√© vykurovanie', 'efficiency': 0.95, 'fuel': 'district_heating'}
        }
        
        heating_system = heating_types.get(heating_choice, heating_types['1'])
        
        # Mo≈ænos≈• zadania vlastnej √∫ƒçinnosti
        custom_efficiency = input(f"√öƒçinnos≈• syst√©mu [%] (Enter={heating_system['efficiency']*100:.1f}%): ").strip()
        if custom_efficiency:
            try:
                heating_system['efficiency'] = float(custom_efficiency) / 100
            except ValueError:
                pass
                
        systems_data['heating'] = heating_system
        
        # Tepl√° voda
        print("\nüöø PR√çPRAVA TEPLEJ VODY:")
        dhw_same = input("Rovnak√Ω syst√©m ako vykurovanie? (a/n): ").strip().lower()
        
        if dhw_same == 'n':
            dhw_choice = input("Typ ohrevu TUV (1-5): ").strip()
            dhw_system = heating_types.get(dhw_choice, heating_types['2'])
        else:
            dhw_system = heating_system.copy()
            
        systems_data['dhw'] = dhw_system
        
        # Vetranie
        print("\nüå¨Ô∏è VETRANIE:")
        print("1. Prirodzen√© vetranie")
        print("2. Mechanick√© vetranie")
        print("3. Rekuper√°cia (√∫ƒçinnos≈• 70%)")
        print("4. Rekuper√°cia (√∫ƒçinnos≈• 85%)")
        
        vent_choice = input("Typ vetrania (1-4): ").strip()
        vent_systems = {
            '1': {'name': 'Prirodzen√©', 'recovery_efficiency': 0.0},
            '2': {'name': 'Mechanick√©', 'recovery_efficiency': 0.0},
            '3': {'name': 'Rekuper√°cia 70%', 'recovery_efficiency': 0.70},
            '4': {'name': 'Rekuper√°cia 85%', 'recovery_efficiency': 0.85}
        }
        
        systems_data['ventilation'] = vent_systems.get(vent_choice, vent_systems['1'])
        
        return systems_data
    
    def collect_usage_data(self) -> Dict[str, Any]:
        """Zber √∫dajov o u≈æ√≠van√≠ budovy"""
        print("\nüë• 4. √öDAJE O U≈Ω√çVAN√ç")
        print("-" * 40)
        
        usage_data = {}
        
        # Poƒçet obyvateƒæov/u≈æ√≠vateƒæov
        try:
            usage_data['occupants'] = int(input("Poƒçet st√°lych obyvateƒæov/u≈æ√≠vateƒæov: ").strip())
        except ValueError:
            usage_data['occupants'] = 4
            
        # Teplota vykurovania
        try:
            usage_data['heating_temp'] = float(input("Po≈æadovan√° teplota vykurovania [¬∞C] (Enter=20): ").strip() or "20")
        except ValueError:
            usage_data['heating_temp'] = 20.0
            
        # Teplota TUV
        try:
            usage_data['dhw_temp'] = float(input("Teplota teplej vody [¬∞C] (Enter=55): ").strip() or "55")
        except ValueError:
            usage_data['dhw_temp'] = 55.0
            
        # Klimatick√° lokalita
        print("\nKlimatick√° lokalita:")
        print("1. Bratislava a okolie")
        print("2. Z√°padn√© Slovensko")
        print("3. Stredn√© Slovensko") 
        print("4. V√Ωchodn√© Slovensko")
        print("5. Horsk√© oblasti")
        
        climate_choice = input("Klimatick√° lokalita (1-5): ").strip()
        climate_zones = {
            '1': {'name': 'Bratislava', 'hdd': 2800, 'avg_temp': 10.5},
            '2': {'name': 'Z√°padn√© SK', 'hdd': 3000, 'avg_temp': 9.8},
            '3': {'name': 'Stredn√© SK', 'hdd': 3200, 'avg_temp': 8.5},
            '4': {'name': 'V√Ωchodn√© SK', 'hdd': 3100, 'avg_temp': 9.0},
            '5': {'name': 'Horsk√© oblasti', 'hdd': 3800, 'avg_temp': 6.5}
        }
        
        usage_data['climate'] = climate_zones.get(climate_choice, climate_zones['1'])
        
        return usage_data
        
    def calculate_energy_performance(self) -> Dict[str, Any]:
        """V√Ωpoƒçet energetick√Ωch vlastnost√≠"""
        print("\nüî¨ V√ùPOƒåET ENERGETICK√ùCH VLASTNOST√ç")
        print("-" * 50)
        print("Prebieha v√Ωpoƒçet podƒæa STN EN ISO 52016...")
        
        # Z√°kladn√© v√Ωpoƒçty
        building_data = self.audit_data['building']
        envelope_data = self.audit_data['envelope'] 
        systems_data = self.audit_data['systems']
        usage_data = self.audit_data['usage']
        
        results = {}
        
        # V√Ωpoƒçet tepeln√Ωch str√°t ob√°lkou
        total_heat_loss = 0
        envelope_details = []
        
        for construction in envelope_data['constructions']:
            heat_loss = construction['area'] * construction['u_value']
            total_heat_loss += heat_loss
            
            envelope_details.append({
                'name': construction['name'],
                'area': construction['area'],
                'u_value': construction['u_value'],
                'heat_loss': heat_loss
            })
        
        results['envelope_analysis'] = {
            'total_heat_loss_coefficient': total_heat_loss,
            'details': envelope_details
        }
        
        # V√Ωpoƒçet potreby tepla na vykurovanie
        hdd = usage_data['climate']['hdd']
        heating_need = total_heat_loss * hdd * 24 / 1000  # kWh/rok
        
        # Korekcia na vetranie
        air_change_rate = 0.5  # h-1 (prirodzen√©)
        if systems_data['ventilation']['name'] == 'Mechanick√©':
            air_change_rate = 0.8
        elif 'Rekuper√°cia' in systems_data['ventilation']['name']:
            air_change_rate = 0.8 * (1 - systems_data['ventilation']['recovery_efficiency'])
        
        ventilation_loss = building_data['volume'] * air_change_rate * 0.34 * hdd * 24 / 1000
        
        total_heating_need = heating_need + ventilation_loss
        
        # Sol√°rne a vn√∫torn√© zisky
        window_area = next((c['area'] for c in envelope_data['constructions'] if c['type'] == 'window'), 20)
        solar_gains = window_area * 150  # kWh/rok (zjednodu≈°ene)
        internal_gains = building_data['floor_area'] * 3.5 * 365 / 1000  # kWh/rok
        
        net_heating_need = max(0, total_heating_need - solar_gains - internal_gains)
        
        results['heating_analysis'] = {
            'transmission_losses': heating_need,
            'ventilation_losses': ventilation_loss, 
            'total_losses': total_heating_need,
            'solar_gains': solar_gains,
            'internal_gains': internal_gains,
            'net_heating_need': net_heating_need,
            'specific_heating_need': net_heating_need / building_data['heated_area']
        }
        
        # V√Ωpoƒçet spotreby energie na vykurovanie
        heating_energy = net_heating_need / systems_data['heating']['efficiency']
        
        # V√Ωpoƒçet potreby tepla na TUV  
        dhw_need = usage_data['occupants'] * 25 * 365 / 1000  # kWh/rok (25 l/os/de≈à)
        dhw_energy = dhw_need / systems_data['dhw']['efficiency']
        
        # Elektrick√° energia (osvetlenie, spotrebiƒçe)
        electricity_need = building_data['floor_area'] * 15  # kWh/m¬≤rok
        
        results['energy_consumption'] = {
            'heating_energy': heating_energy,
            'dhw_energy': dhw_energy,
            'electricity': electricity_need,
            'total_energy': heating_energy + dhw_energy + electricity_need,
            'specific_total': (heating_energy + dhw_energy + electricity_need) / building_data['heated_area']
        }
        
        # Prim√°rna energia
        primary_factors = {
            'natural_gas': 1.1,
            'electricity': 3.0,
            'biomass': 0.2,
            'district_heating': 1.3
        }
        
        heating_primary = heating_energy * primary_factors.get(systems_data['heating']['fuel'], 1.1)
        dhw_primary = dhw_energy * primary_factors.get(systems_data['dhw']['fuel'], 1.1)
        electricity_primary = electricity_need * primary_factors['electricity']
        
        total_primary = heating_primary + dhw_primary + electricity_primary
        specific_primary = total_primary / building_data['heated_area']
        
        results['primary_energy'] = {
            'heating': heating_primary,
            'dhw': dhw_primary, 
            'electricity': electricity_primary,
            'total': total_primary,
            'specific': specific_primary
        }
        
        # Energetick√° trieda
        if specific_primary <= 50:
            energy_class = 'A'
        elif specific_primary <= 75:
            energy_class = 'B'
        elif specific_primary <= 110:
            energy_class = 'C'
        elif specific_primary <= 150:
            energy_class = 'D'
        elif specific_primary <= 200:
            energy_class = 'E'
        elif specific_primary <= 250:
            energy_class = 'F'
        else:
            energy_class = 'G'
            
        results['energy_class'] = {
            'class': energy_class,
            'specific_primary_energy': specific_primary
        }
        
        # CO2 emisie
        emission_factors = {
            'natural_gas': 0.202,  # kg CO2/kWh
            'electricity': 0.486,
            'biomass': 0.018,
            'district_heating': 0.280
        }
        
        heating_co2 = heating_energy * emission_factors.get(systems_data['heating']['fuel'], 0.202)
        dhw_co2 = dhw_energy * emission_factors.get(systems_data['dhw']['fuel'], 0.202)
        electricity_co2 = electricity_need * emission_factors['electricity']
        
        total_co2 = heating_co2 + dhw_co2 + electricity_co2
        
        results['co2_emissions'] = {
            'heating': heating_co2,
            'dhw': dhw_co2,
            'electricity': electricity_co2,
            'total': total_co2,
            'specific': total_co2 / building_data['heated_area']
        }
        
        print("‚úÖ V√Ωpoƒçty dokonƒçen√©!")
        return results
        
    def generate_professional_report(self):
        """Generovanie profesion√°lneho reportu"""
        print("\nüìÑ GENEROVANIE PROFESION√ÅLNEHO REPORTU")
        print("-" * 50)
        
        # Z√°kladn√© √∫daje
        building = self.audit_data['building']
        results = self.results
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
        
        report = {
            'audit_info': {
                'title': 'ENERGETICK√ù AUDIT BUDOVY',
                'subtitle': f"Energetick√© hodnotenie budovy {building['name']}",
                'date': timestamp,
                'auditor': 'Ing. Energetick√Ω Aud√≠tor',
                'standard': 'STN EN 16247-1, STN EN ISO 52016'
            },
            'building_info': building,
            'results': results,
            'recommendations': self._generate_recommendations(),
            'certification': {
                'energy_class': results['energy_class']['class'],
                'specific_primary_energy': f"{results['energy_class']['specific_primary_energy']:.1f} kWh/m¬≤rok",
                'co2_emissions': f"{results['co2_emissions']['specific']:.1f} kg CO2/m¬≤rok"
            }
        }
        
        # Ulo≈æenie reportu
        report_filename = f"energeticky_audit_{building['name'].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2, default=str)
            
        print(f"‚úÖ Report ulo≈æen√Ω: {report_filename}")
        return report, report_filename
        
    def _generate_recommendations(self) -> List[Dict[str, Any]]:
        """Generovanie odpor√∫ƒçan√≠ na z√°klade v√Ωpoƒçtov"""
        recommendations = []
        results = self.results
        
        # Hodnotenie ob√°lky
        envelope = results['envelope_analysis']['details']
        
        for element in envelope:
            if element['name'] == 'Obvodov√° stena' and element['u_value'] > 0.30:
                recommendations.append({
                    'category': 'Tepeln√° izol√°cia',
                    'title': 'Zateplenie obvodov√Ωch stien',
                    'description': f'Aktu√°lna U-hodnota {element["u_value"]:.2f} W/m¬≤K je vysok√°. Odpor√∫ƒçame zateplenie.',
                    'priority': 'Vysok√°',
                    'estimated_savings': '25-35%'
                })
                
            if element['name'] == 'Okn√°' and element['u_value'] > 2.0:
                recommendations.append({
                    'category': 'V√Ωplne otvorov',
                    'title': 'V√Ωmena okien',
                    'description': f'Aktu√°lna U-hodnota okien {element["u_value"]:.1f} W/m¬≤K. V√Ωmena za kvalitn√© trojsklo.',
                    'priority': 'Stredn√°',
                    'estimated_savings': '15-20%'
                })
        
        # Hodnotenie syst√©mov
        if self.audit_data['systems']['heating']['efficiency'] < 0.85:
            recommendations.append({
                'category': 'Vykurovac√≠ syst√©m',
                'title': 'Moderniz√°cia vykurovacieho syst√©mu',
                'description': 'N√≠zka √∫ƒçinnos≈• vykurovacieho syst√©mu. Odpor√∫ƒçame v√Ωmenu za efekt√≠vnej≈°√≠.',
                'priority': 'Vysok√°',
                'estimated_savings': '20-30%'
            })
            
        if 'Rekuper√°cia' not in self.audit_data['systems']['ventilation']['name']:
            recommendations.append({
                'category': 'Vetranie',
                'title': 'In≈°tal√°cia rekuperaƒçnej jednotky',
                'description': 'Rekuper√°cia tepla z odv√°dzan√©ho vzduchu m√¥≈æe prinies≈• v√Ωznamn√© √∫spory.',
                'priority': 'Stredn√°',
                'estimated_savings': '10-15%'
            })
            
        return recommendations
        
    def print_summary_report(self):
        """V√Ωpis s√∫hrnn√©ho reportu na obrazovku"""
        print("\n" + "="*80)
        print("üìã S√öHRNN√ù ENERGETICK√ù AUDIT")
        print("="*80)
        
        building = self.audit_data['building']
        results = self.results
        
        print(f"üè¢ Budova: {building['name']}")
        print(f"üìç Adresa: {building['address']}")
        print(f"üèóÔ∏è  Typ: {building['type']}")
        print(f"üìê Podlahov√° plocha: {building['floor_area']:.0f} m¬≤")
        print(f"üìÖ Rok v√Ωstavby: {building['construction_year']}")
        
        print(f"\n‚ö° ENERGETICK√Å BILANCIA:")
        print(f"‚îú‚îÄ Potreba tepla na vykurovanie: {results['heating_analysis']['net_heating_need']:.0f} kWh/rok")
        print(f"‚îú‚îÄ Spotreba na vykurovanie: {results['energy_consumption']['heating_energy']:.0f} kWh/rok")
        print(f"‚îú‚îÄ Spotreba na TUV: {results['energy_consumption']['dhw_energy']:.0f} kWh/rok")
        print(f"‚îú‚îÄ Elektrick√° energia: {results['energy_consumption']['electricity']:.0f} kWh/rok")
        print(f"‚îî‚îÄ Celkov√° spotreba: {results['energy_consumption']['total_energy']:.0f} kWh/rok")
        
        print(f"\nüéØ ENERGETICK√â HODNOTENIE:")
        print(f"‚îú‚îÄ Energetick√° trieda: {results['energy_class']['class']}")
        print(f"‚îú‚îÄ Prim√°rna energia: {results['primary_energy']['specific']:.1f} kWh/m¬≤rok") 
        print(f"‚îú‚îÄ CO2 emisie: {results['co2_emissions']['specific']:.1f} kg CO2/m¬≤rok")
        print(f"‚îî‚îÄ ≈†pecifick√° spotreba: {results['energy_consumption']['specific_total']:.1f} kWh/m¬≤rok")
        
        print(f"\nüè† OB√ÅLKA BUDOVY:")
        for detail in results['envelope_analysis']['details']:
            print(f"‚îú‚îÄ {detail['name']}: {detail['area']:.0f} m¬≤, U={detail['u_value']:.2f} W/m¬≤K")
        print(f"‚îî‚îÄ Celkov√Ω s√∫ƒçiniteƒæ prestupu: {results['envelope_analysis']['total_heat_loss_coefficient']:.1f} W/K")
        
        print(f"\nüí° HLAVN√â ODPOR√öƒåANIA:")
        recommendations = self._generate_recommendations()
        for i, rec in enumerate(recommendations[:3], 1):
            print(f"{i}. {rec['title']} - {rec['estimated_savings']} √∫spory")
            
    def run_interactive_audit(self):
        """Hlavn√Ω proces interakt√≠vneho auditu"""
        self.welcome_screen()
        
        try:
            # Zber d√°t
            self.audit_data['building'] = self.collect_basic_building_data()
            self.audit_data['envelope'] = self.collect_envelope_data() 
            self.audit_data['systems'] = self.collect_systems_data()
            self.audit_data['usage'] = self.collect_usage_data()
            
            # V√Ωpoƒçty
            self.results = self.calculate_energy_performance()
            
            # Zobrazenie v√Ωsledkov
            self.print_summary_report()
            
            # Generovanie reportu
            report, filename = self.generate_professional_report()
            
            # Mo≈ænos≈• generovania certifik√°tu
            generate_cert = input("\nüèÖ Chcete vygenerova≈• energetick√Ω certifik√°t? (a/n): ").strip().lower()
            if generate_cert == 'a':
                self.generate_energy_certificate()
                
            print(f"\n‚úÖ Energetick√Ω audit dokonƒçen√Ω!")
            print(f"üìÅ Report ulo≈æen√Ω: {filename}")
            
            return True
            
        except KeyboardInterrupt:
            print("\n\n‚ùå Audit preru≈°en√Ω pou≈æ√≠vateƒæom.")
            return False
        except Exception as e:
            print(f"\n‚ùå Chyba poƒças auditu: {e}")
            return False
    
    def generate_energy_certificate(self):
        """Generovanie energetick√©ho certifik√°tu"""
        print("\nüèÖ GENEROVANIE ENERGETICK√âHO CERTIFIK√ÅTU")
        print("-" * 50)
        
        building = self.audit_data['building']
        results = self.results
        
        certificate_data = {
            'building_name': building['name'],
            'address': building['address'],
            'building_type': building['type'],
            'floor_area': building['heated_area'],
            'energy_class': results['energy_class']['class'],
            'primary_energy': results['primary_energy']['specific'],
            'co2_emissions': results['co2_emissions']['specific'],
            'issue_date': datetime.now().strftime('%Y-%m-%d'),
            'valid_until': (datetime.now().replace(year=datetime.now().year + 10)).strftime('%Y-%m-%d'),
            'auditor': 'Ing. Energetick√Ω Aud√≠tor',
            'certificate_number': f"EC-{datetime.now().strftime('%Y%m%d%H%M')}"
        }
        
        try:
            # Jednoducho vytvor√≠me JSON s certifik√°tom
            certificate = {
                'certificate_type': 'Energetick√Ω certifik√°t budovy',
                'validity': 'Valid√°cia podl≈•a STN EN 16247',
                'energy_performance': {
                    'class': certificate_data['energy_class'],
                    'primary_energy': certificate_data['primary_energy'],
                    'co2_emissions': certificate_data['co2_emissions']
                }
            }
            
            cert_filename = f"certifikat_{building['name'].replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.json"
            
            with open(cert_filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'certificate_data': certificate_data,
                    'certificate': certificate
                }, f, ensure_ascii=False, indent=2, default=str)
                
            print(f"‚úÖ Energetick√Ω certifik√°t vygenerovan√Ω: {cert_filename}")
            print(f"üìã ƒå√≠slo certifik√°tu: {certificate_data['certificate_number']}")
            print(f"üèÖ Energetick√° trieda: {certificate_data['energy_class']}")
            print(f"‚ö° Prim√°rna energia: {certificate_data['primary_energy']:.1f} kWh/m¬≤rok")
            
        except Exception as e:
            print(f"‚ùå Chyba pri generovan√≠ certifik√°tu: {e}")

def main():
    """Hlavn√° funkcia"""
    audit_system = InteractiveEnergyAudit()
    audit_system.run_interactive_audit()

if __name__ == "__main__":
    main()